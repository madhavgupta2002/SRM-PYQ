{
  "paper_title": "Programming For Problem Solving (QP PPS CT1 SET 2)",
  "source": "2023-24 CT1 Set2",
  "questions": [
    {
      "question_number": "1",
      "question_text": "Write a program to illustrate the difference between arithmetic and relational operators in C.",
      "marks": 5,
      "answer": "Arithmetic operators perform mathematical calculations (addition, subtraction, multiplication, division, modulo). Relational operators compare two values and return a boolean result (true/false, represented as 1/0 in C) based on the comparison (e.g., equal to, not equal to, greater than, less than).\n\n```c\n#include <stdio.h>\n\nint main() {\n    int a = 10, b = 5;\n    int result_arithmetic;\n    int result_relational;\n\n    // Illustrating Arithmetic Operators\n    printf(\"\\n--- Arithmetic Operators ---\\n\");\n    result_arithmetic = a + b;\n    printf(\"a + b = %d\\n\", result_arithmetic); // Addition\n    result_arithmetic = a - b;\n    printf(\"a - b = %d\\n\", result_arithmetic); // Subtraction\n    result_arithmetic = a * b;\n    printf(\"a * b = %d\\n\", result_arithmetic); // Multiplication\n    result_arithmetic = a / b;\n    printf(\"a / b = %d\\n\", result_arithmetic); // Division\n    result_arithmetic = a % b;\n    printf(\"a %% b = %d\\n\", result_arithmetic); // Modulo\n\n    // Illustrating Relational Operators\n    printf(\"\\n--- Relational Operators ---\\n\");\n    result_relational = (a == b);\n    printf(\"a == b (10 == 5): %d (0 for false, 1 for true)\\n\", result_relational); // Equal to\n    result_relational = (a != b);\n    printf(\"a != b (10 != 5): %d\\n\", result_relational); // Not equal to\n    result_relational = (a > b);\n    printf(\"a > b (10 > 5): %d\\n\", result_relational); // Greater than\n    result_relational = (a < b);\n    printf(\"a < b (10 < 5): %d\\n\", result_relational); // Less than\n    result_relational = (a >= b);\n    printf(\"a >= b (10 >= 5): %d\\n\", result_relational); // Greater than or equal to\n    result_relational = (a <= b);\n    printf(\"a <= b (10 <= 5): %d\\n\", result_relational); // Less than or equal to\n\n    return 0;\n}\n```\n\n**Output:**\n```\n--- Arithmetic Operators ---\na + b = 15\na - b = 5\na * b = 50\na / b = 2\na % b = 0\n\n--- Relational Operators ---\na == b (10 == 5): 0 (0 for false, 1 for true)\na != b (10 != 5): 1\na > b (10 > 5): 1\na < b (10 < 5): 0\na >= b (10 >= 5): 1\na <= b (10 <= 5): 0\n```",
      "answer_source": "generated",
      "chapter": "Unit 1: Arithmetic, Relational and logical Operators"
    },
    {
      "question_number": "2",
      "question_text": "Write the output of the program and justify the answer\n```c\n#include<stdio.h>\nint main()\n{\nint n=7,p; p=n++;\nprintf(\"p=%d n=%d\\n\",p,n);\np=++n;\nprintf(\"p=%d n=%d\\n\",p,n);\nprintf(\"%d %d %d\\n\",n++,n++,n++);\nprintf(\"%d %d %d\\n\",++p,++p,++p);\nreturn (0);}\n```",
      "marks": 5,
      "answer": "Output:\n```\np=7 n=8\np=9 n=9\n9 10 11\n12 13 14\n```\n\n**Justification:**\n- `p=n++`: Assigns 7 to `p`, then increments `n` to 8.\n- `p=++n`: Increments `n` to 9, assigns 9 to `p`.\n- `printf(\"%d %d %d\\n\",n++,n++,n++)`: Uses `n` (9, 10, 11) for each argument, incrementing after each use. Prints `9 10 11`.\n- `printf(\"%d %d %d\\n\",++p,++p,++p)`: Increments `p` before each use (to 12, 13, 14). Prints `12 13 14`.\n\nNote: Using multiple increments on the same variable in one statement is undefined behavior in C, but this is the typical output on many compilers.",
      "answer_source": "generated",
      "chapter": "Unit 1: Increment and decrement operator, Expressions with pre / post increment operator"
    },
    {
      "question_number": "3",
      "question_text": "Define an identifier. Mention the rules to create an identifier in C with relevant examples.",
      "marks": 5,
      "answer": "**Identifier Definition:**\nAn identifier in C is a name given to a program element such as variables, functions, arrays, structures, etc. Identifiers are user-defined names that help in uniquely identifying an entity during programming. They allow programmers to refer to specific data or code blocks within a program.\n\n**Rules to Create an Identifier in C:**\n1.  **First Character:** An identifier must start with an alphabet (A-Z or a-z) or an underscore (_).\n    *   **Valid:** `_count`, `name`, `totalAmount`\n    *   **Invalid:** `1variable`, `-sum`\n2.  **Subsequent Characters:** After the first character, an identifier can contain any combination of alphabets (A-Z, a-z), digits (0-9), or underscores (_).\n    *   **Valid:** `var1`, `my_name`, `data_2023`\n    *   **Invalid:** `my variable` (contains space), `sum#` (contains special character #)\n3.  **Keywords (Reserved Words):** Identifiers cannot be a C keyword (a reserved word). Keywords like `int`, `float`, `char`, `if`, `else`, `while`, `for`, `return`, `void`, etc., have predefined meanings in C and cannot be used as identifiers.\n    *   **Valid:** `integer_val`, `whileLoop`\n    *   **Invalid:** `int`, `for`\n4.  **Case Sensitivity:** C is a case-sensitive language, meaning `myVar`, `MyVar`, and `myvar` are all treated as different identifiers.\n    *   **Example:** `int count;` and `int Count;` are two distinct variables.\n5.  **No Special Characters (except underscore):** Identifiers cannot contain any special characters like `!`, `@`, `#`, `$`, `%`, `^`, `&`, `*`, `(`, `)`, `-`, `+`, `=`, `~`, `\\`, `|`, `{`, `}`, `[`, `]`, `:`, `;`, `'`, `\"`, `<`, `>`, `?`, `/`, `,`, `.`, etc., other than the underscore (_).\n    *   **Valid:** `_temp_value`\n    *   **Invalid:** `price$`, `user-id`\n6.  **Length:** While there's no strict limit on the length of an identifier, only the first 31 characters (as per ANSI C standard) are guaranteed to be significant by the compiler. It's good practice to keep identifiers reasonably short and meaningful.\n\n**Examples:**\n*   `studentName`\n*   `age`\n*   `total_marks`\n*   `_file_pointer`\n*   `calculateSum`\n*   `MAX_SIZE` (often used for constants)\n*   `variable123`",
      "answer_source": "generated",
      "chapter": "Unit 1: Variables and identifiers, Constants, Keywords"
    },
    {
      "question_number": "4",
      "question_text": "A drawing competition is organized during Diwali festival by an NGO. There are THREE groups (A, B & C) of participants. Amrita is interested in joining B group but confused about her eligibility criteria. Her age is 12. Can you clarify her doubt using a C program?\nCondition for eligibility\nEligible for C group - if age >18\nEligible for B group - if age >=12 and <=18\nEligible for A group - if age <12.",
      "marks": 5,
      "answer": "```c\n#include <stdio.h>\n\nint main() {\n    int amritaAge = 12; // Amrita's age\n    char group_preference = 'B'; // Amrita's preferred group\n\n    printf(\"Amrita's Age: %d\\n\", amritaAge);\n    printf(\"Amrita's Preferred Group: %c\\n\\n\", group_preference);\n\n    printf(\"--- Eligibility Criteria ---\\n\");\n    printf(\"Group A: age < 12\\n\");\n    printf(\"Group B: age >= 12 and <= 18\\n\");\n    printf(\"Group C: age > 18\\n\");\n    printf(\"----------------------------\\n\\n\");\n\n    printf(\"Checking Amrita's eligibility for Group B:\\n\");\n\n    if (amritaAge >= 12 && amritaAge <= 18) {\n        printf(\"Yes, Amrita (age %d) is eligible for Group B.\\n\", amritaAge);\n    } else {\n        printf(\"No, Amrita (age %d) is not eligible for Group B.\\n\", amritaAge);\n    }\n\n    printf(\"\\n--- General Eligibility Check ---\\n\");\n    if (amritaAge < 12) {\n        printf(\"Amrita is eligible for Group A.\\n\");\n    }\n    else if (amritaAge >= 12 && amritaAge <= 18) {\n        printf(\"Amrita is eligible for Group B.\\n\");\n    }\n    else if (amritaAge > 18) {\n        printf(\"Amrita is eligible for Group C.\\n\");\n    }\n    else {\n        printf(\"Invalid age provided.\\n\"); // Should not be reached with valid age\n    }\n\n    return 0;\n}\n```\n\n**Output:**\n```\nAmrita's Age: 12\nAmrita's Preferred Group: B\n\n--- Eligibility Criteria ---\nGroup A: age < 12\nGroup B: age >= 12 and <= 18\nGroup C: age > 18\n----------------------------\n\nChecking Amrita's eligibility for Group B:\nYes, Amrita (age 12) is eligible for Group B.\n\n--- General Eligibility Check ---\nAmrita is eligible for Group B.\n```\n\n**Clarification for Amrita's doubt:**\nBased on the conditions:\n*   Eligible for C group - if age > 18\n*   Eligible for B group - if age >= 12 and <= 18\n*   Eligible for A group - if age < 12\n\nAmrita's age is 12. Since her age is greater than or equal to 12 and less than or equal to 18 (12 >= 12 && 12 <= 18 is true), she is eligible for Group B. The program confirms this by evaluating the conditional statements.",
      "answer_source": "generated",
      "chapter": "Unit 2: Conditional Control -Statements :Simple if, if...else - Conditional Statements : else if and nested if"
    },
    {
      "question_number": "5",
      "question_text": "Outline the general structure of a 'C' program and explain with an example.",
      "marks": 10,
      "answer": "The general structure of a C program is a logical and organized layout that ensures the compiler can correctly interpret and execute the code. While minor variations exist, a typical C program follows these main sections:\n\n1.  **Documentation Section:** (Optional but highly recommended)\n    *   This section includes comments (`/* ... */` for multiline or `//` for single line) that provide information about the program, such as its purpose, author, date, and any specific notes. It's for human readability and is ignored by the compiler.\n\n2.  **Link Section (Header Files):**\n    *   This section includes header files (`.h` files) that contain declarations of functions and macros used in the program. These files provide access to standard library functions (e.g., input/output, string manipulation, mathematical operations). The `#include` preprocessor directive is used for this purpose.\n    *   **Example:** `#include <stdio.h>` for standard input/output functions.\n\n3.  **Definition Section (Global Declarations):**\n    *   This section defines symbolic constants (using `#define`) and global variables. Global variables are declared outside any function and are accessible throughout the entire program.\n    *   **Example:** `#define PI 3.14159`, `int global_variable;`\n\n4.  **Global Declaration Section (Function Prototypes):**\n    *   This section contains declarations for user-defined functions that are used later in the program. A function prototype tells the compiler about the function's return type, name, and parameters, allowing the function to be called before its actual definition appears.\n    *   **Example:** `int add(int a, int b);`\n\n5.  **`main()` Function Section:**\n    *   Every C program must have a `main()` function, which is the entry point for program execution. The operating system starts executing the program from this function. The `main()` function can return an integer value (typically 0 for success).\n    *   **Syntax:** `int main() { /* program logic */ return 0; }`\n    *   **Local Declaration Part:** Inside `main()`, variables specific to the `main()` function are declared.\n    *   **Executable Part:** Contains the actual instructions, calculations, function calls, and control flow statements.\n\n6.  **Subprogram Section (User-defined Functions):**\n    *   This section contains the definitions of all user-defined functions that were prototyped earlier or are called from `main()` or other functions. Each function definition includes its return type, name, parameters, and the body of the function.\n    *   **Example:**\n        ```c\n        int add(int a, int b) {\n            return a + b;\n        }\n        ```\n\n**Example C Program Illustrating the Structure:**\n\n```c\n/*\n * File: calculate_area.c\n * Author: [Your Name]\n * Date: October 26, 2023\n * Description: This program calculates the area and circumference of a circle.\n */\n\n// Link Section: Include standard input/output library\n#include <stdio.h>\n\n// Definition Section: Define a symbolic constant for PI\n#define PI 3.14159\n\n// Global Declaration Section: Function prototype for calculateCircleStats\nvoid calculateCircleStats(float radius, float *area, float *circumference);\n\n// Main function section - Entry point of the program\nint main() {\n    // Local Declaration Part\n    float r = 5.0; // Radius of the circle\n    float circle_area;\n    float circle_circumference;\n\n    printf(\"\\n--- Circle Statistics Program ---\\n\");\n\n    // Executable Part\n    // Call the user-defined function\n    calculateCircleStats(r, &circle_area, &circle_circumference);\n\n    printf(\"Radius: %.2f units\\n\", r);\n    printf(\"Area: %.2f square units\\n\", circle_area);\n    printf(\"Circumference: %.2f units\\n\", circle_circumference);\n\n    printf(\"----------------------------------\\n\");\n\n    return 0; // Indicate successful execution\n}\n\n// Subprogram Section: Definition of user-defined function\nvoid calculateCircleStats(float radius, float *area, float *circumference) {\n    *area = PI * radius * radius;\n    *circumference = 2 * PI * radius;\n}\n```\n\n**Explanation of Example:**\n*   **Documentation:** Top comments explain the file and purpose.\n*   **Link Section:** `stdio.h` is included for `printf`.\n*   **Definition Section:** `PI` is defined as a constant.\n*   **Global Declaration:** `calculateCircleStats` function is prototyped.\n*   **`main()` Function:**\n    *   Local variables `r`, `circle_area`, `circle_circumference` are declared.\n    *   `calculateCircleStats` is called, passing the radius and addresses of `circle_area` and `circle_circumference` to update them directly.\n    *   Results are printed.\n*   **Subprogram Section:** The `calculateCircleStats` function is defined, which takes a radius and two pointers to float, calculating the area and circumference and storing them in the memory locations pointed to by `area` and `circumference` respectively.",
      "answer_source": "generated",
      "chapter": "Unit 1: Introduction to C: Structure of the C program"
    },
    {
      "question_number": "6",
      "question_text": "In an interview a task is given to the candidates to compute addition, subtraction, multiplication, division and remainder. The two given integer values are 17 and 13.\nCondition given:\nint testnum1, testnum2;\nfloat div;\nWrite a C program to solve this problem.",
      "marks": 10,
      "answer": "```c\n#include <stdio.h>\n\nint main() {\n    // Given integer values and variable declarations\n    int testnum1 = 17;\n    int testnum2 = 13;\n    float div_result; // Variable for division result\n\n    // --- Perform Arithmetic Operations ---\n\n    // Addition\n    int sum = testnum1 + testnum2;\n    printf(\"Addition: %d + %d = %d\\n\", testnum1, testnum2, sum);\n\n    // Subtraction\n    int difference = testnum1 - testnum2;\n    printf(\"Subtraction: %d - %d = %d\\n\", testnum1, testnum2, difference);\n\n    // Multiplication\n    int product = testnum1 * testnum2;\n    printf(\"Multiplication: %d * %d = %d\\n\", testnum1, testnum2, product);\n\n    // Division (Integer Division vs. Floating Point Division)\n    // Integer division will truncate the decimal part\n    int int_division = testnum1 / testnum2;\n    printf(\"Integer Division: %d / %d = %d\\n\", testnum1, testnum2, int_division);\n\n    // To get floating-point division, at least one operand must be a float.\n    // We cast testnum1 to float to ensure floating-point division.\n    div_result = (float)testnum1 / testnum2;\n    printf(\"Floating-point Division: %d / %d = %.2f\\n\", testnum1, testnum2, div_result);\n\n    // Remainder (Modulo operator applies only to integers)\n    int remainder_val = testnum1 % testnum2;\n    printf(\"Remainder: %d %% %d = %d\\n\", testnum1, testnum2, remainder_val);\n\n    return 0;\n}\n```\n\n**Output:**\n```\nAddition: 17 + 13 = 30\nSubtraction: 17 - 13 = 4\nMultiplication: 17 * 13 = 221\nInteger Division: 17 / 13 = 1\nFloating-point Division: 17 / 13 = 1.31\nRemainder: 17 % 13 = 4\n```\n\n**Explanation:**\n1.  **Variable Declaration and Initialization:** `testnum1` and `testnum2` are declared as `int` and initialized to 17 and 13 respectively. `div_result` is declared as `float` as per the problem condition, to store the floating-point division result.\n2.  **Addition, Subtraction, Multiplication:** These operations (`+`, `-`, `*`) are straightforward. The results are stored in `int` variables and printed.\n3.  **Integer Division:** When both operands of the `/` operator are integers, C performs integer division, which truncates the fractional part. So, `17 / 13` results in `1`.\n4.  **Floating-point Division:** To get a precise division result with decimal places, one of the operands must be a floating-point type. We achieve this by *type casting* `testnum1` to `float` (`(float)testnum1`). This promotes `testnum2` to `float` as well, performing floating-point division.\n5.  **Remainder (Modulo):** The `%` operator calculates the remainder of an integer division. It can only be used with integer operands. `17 % 13` results in `4` (since 17 = 1 * 13 + 4).",
      "answer_source": "generated",
      "chapter": "Unit 1: Numeric Data types: integer, floating point - Arithmetic, Relational and logical Operators - Input and output statements"
    }
  ]
}