{
    "paper_title": "PPS CT1 SET 5 AND 6 Answer Key",
    "source": "2023-10_CT1_Set5-6_Key.pdf",
    "questions": [
        {
            "question_number": "SET 5 - 1",
            "question_text": "Provide flowcharts to find the minimum and maximum of 3 numbers.",
            "marks": 5,
            "answer": "The answer consists of two flowcharts. \n1. **Flowchart for Minimum of 3 Numbers:** It starts, reads three numbers (a, b, c), then uses nested decision blocks (diamonds) to compare them. For example, it first checks if a < b. If true, it checks if a < c. If also true, it prints 'a' as the smallest. It follows all paths of comparison to find and print the single smallest number before stopping.\n2. **Flowchart for Maximum of 3 Numbers:** It starts, reads an array of numbers, initializes a variable 'LargestValue' with the first element, then loops through the rest of the array. Inside the loop, a decision block checks if the current element is greater than 'LargestValue'. If true, 'LargestValue' is updated to this new value. The loop continues until all elements are checked, and then the final 'LargestValue' is printed before stopping.",
            "answer_source": "provided",
            "chapter": "Unit 1: Evolution of Programming & Languages - Problem solving through programming - Writing algorithms & Pseudo code - Single line and multiline comments - Introduction to C: Structure of the C program - Input and output statements. Variables and identifiers, Constants, Keywords - Values, Names, Scope, Binding, Storage Classes - Numeric Data types: integer, floating point Non-Numeric Data types: char and string - L value and R value in expression, Increment and decrement operator - Comma, Arrow and Assignment operator, Bitwise and Size-of operator - Arithmetic, Relational and logical Operators - Condition Operators, Operator Precedence - Expressions with pre / post increment operator."
        },
        {
            "question_number": "SET 5 - 2",
            "question_text": "Explain Assignment and Relational Operators in C.",
            "marks": 5,
            "answer": "**Assignment Operators:**\nAssignment operators are used to assign values to variables. The basic operator is `=`. Compound assignment operators (e.g., `+=`, `-=`, `*=`, `/=`) perform an arithmetic operation and then assign the result.\n*Examples:*\n`int x = 10;` // Assigns 10 to x\n`x += 3;` // Equivalent to x = x + 3. Now, x is 13.\n\n**Relational Operators:**\nRelational operators are used to compare two values and return a boolean result (1 for true, 0 for false). They are primarily used in conditional statements.\n*Operators:*\n`==` (Equal to)\n`!=` (Not equal to)\n`<` (Less than)\n`>` (Greater than)\n`<=` (Less than or equal to)\n`>=` (Greater than or equal to)\n*Example:*\n`int a = 5, b = 10;`\n`bool isEqual = (a == b);` // false (0)\n`bool isLessThan = (a < b);` // true (1)",
            "answer_source": "provided",
            "chapter": "Unit 1: Evolution of Programming & Languages - Problem solving through programming - Writing algorithms & Pseudo code - Single line and multiline comments - Introduction to C: Structure of the C program - Input and output statements. Variables and identifiers, Constants, Keywords - Values, Names, Scope, Binding, Storage Classes - Numeric Data types: integer, floating point Non-Numeric Data types: char and string - L value and R value in expression, Increment and decrement operator - Comma, Arrow and Assignment operator, Bitwise and Size-of operator - Arithmetic, Relational and logical Operators - Condition Operators, Operator Precedence - Expressions with pre / post increment operator."
        },
        {
            "question_number": "SET 5 - 3",
            "question_text": "Write a C program to create a simple calculator.",
            "marks": 5,
            "answer": "```c\n#include <stdio.h>\n\nint main() {\n    char operator;\n    double num1, num2, result;\n\n    // Input operator\n    printf(\"Enter an operator (+, -, *, /): \");\n    scanf(\"%c\", &operator);\n\n    // Input two numbers\n    printf(\"Enter two numbers: \");\n    scanf(\"%lf %lf\", &num1, &num2);\n\n    // Perform calculation based on the operator\n    switch (operator) {\n        case '+':\n            result = num1 + num2;\n            printf(\"Result: %.2lf + %.2lf = %.2lf\\n\", num1, num2, result);\n            break;\n        case '-':\n            result = num1 - num2;\n            printf(\"Result: %.2lf - %.2lf = %.2lf\\n\", num1, num2, result);\n            break;\n        case '*':\n            result = num1 * num2;\n            printf(\"Result: %.2lf * %.2lf = %.2lf\\n\", num1, num2, result);\n            break;\n        case '/':\n            if (num2 != 0) {\n                result = num1 / num2;\n                printf(\"Result: %.2lf / %.2lf = %.2lf\\n\", num1, num2, result);\n            } else {\n                printf(\"Error: Division by zero is not allowed.\\n\");\n            }\n            break;\n        default:\n            printf(\"Error: Invalid operator\\n\");\n    }\n\n    return 0;\n}\n```",
            "answer_source": "provided",
            "chapter": "Unit 2: Conditional Control -Statements :Simple if, if...else - Conditional Statements : else if and nested if - Conditional Statements : Switch case - Un-conditional Control Statements : break, continue, goto - Looping Control Statements: for, while, do.while - Looping Control Statements: nested for, nested while - Introduction to Arrays -One Dimensional (1D) Array Declaration and initialization - Accessing, Indexing and operations with 1D Arrays - Array Programs – 1D - Initializing and Accessing 2D Array, Array Programs – 2D - Pointer and address-of operators -Pointer Declaration and dereferencing, Void Pointers, 5 pointers Pointer based Array manipulation."
        },
        {
            "question_number": "SET 5 - 4",
            "question_text": "Differentiate between while and do-while loops.",
            "marks": 5,
            "answer": "The main difference between `while` and `do-while` loops is when the condition is checked.\n\n**While Loop:**\n- **Entry-Controlled:** The condition is checked *before* the loop body is executed.\n- **Execution:** If the condition is false initially, the loop body will not execute even once.\n- **Syntax:**\n  ```c\n  while (condition) {\n      // body of loop\n  }\n  ```\n- **Example:** `int i = 5; while (i < 5) { /* this code never runs */ }`\n\n**Do...While Loop:**\n- **Exit-Controlled:** The condition is checked *after* the loop body is executed.\n- **Execution:** The loop body is guaranteed to execute at least once, regardless of the condition.\n- **Syntax:**\n  ```c\n  do {\n      // body of loop\n  } while (condition);\n  ```\n- **Example:** `int i = 5; do { /* this code runs once */ } while (i < 5);`",
            "answer_source": "provided",
            "chapter": "Unit 2: Conditional Control -Statements :Simple if, if...else - Conditional Statements : else if and nested if - Conditional Statements : Switch case - Un-conditional Control Statements : break, continue, goto - Looping Control Statements: for, while, do.while - Looping Control Statements: nested for, nested while - Introduction to Arrays -One Dimensional (1D) Array Declaration and initialization - Accessing, Indexing and operations with 1D Arrays - Array Programs – 1D - Initializing and Accessing 2D Array, Array Programs – 2D - Pointer and address-of operators -Pointer Declaration and dereferencing, Void Pointers, 5 pointers Pointer based Array manipulation."
        },
        {
            "question_number": "SET 5 - 5(I)",
            "question_text": "Explain the general rules for writing an algorithm.",
            "marks": 5,
            "answer": "An algorithm is a step-by-step procedure to solve a problem. General rules for writing a good algorithm include:\n1.  **Understand the Problem:** Clearly define the problem, the required inputs, and the desired output.\n2.  **Finiteness:** An algorithm must terminate after a finite number of steps.\n3.  **Definiteness:** Each step must be precise and unambiguous. There should be no room for interpretation.\n4.  **Input:** An algorithm must have zero or more well-defined inputs.\n5.  **Output:** An algorithm must have one or more well-defined outputs that match the desired solution.\n6.  **Effectiveness:** Every instruction must be basic enough to be carried out, in principle, by a person using only pencil and paper.\n7.  **Use Clear Language:** Write steps in simple, clear language.\n8.  **Break Down the Problem:** Decompose complex problems into smaller, manageable subproblems or steps.",
            "answer_source": "provided",
            "chapter": "Unit 1: Evolution of Programming & Languages - Problem solving through programming - Writing algorithms & Pseudo code - Single line and multiline comments - Introduction to C: Structure of the C program - Input and output statements. Variables and identifiers, Constants, Keywords - Values, Names, Scope, Binding, Storage Classes - Numeric Data types: integer, floating point Non-Numeric Data types: char and string - L value and R value in expression, Increment and decrement operator - Comma, Arrow and Assignment operator, Bitwise and Size-of operator - Arithmetic, Relational and logical Operators - Condition Operators, Operator Precedence - Expressions with pre / post increment operator."
        },
        {
            "question_number": "SET 5 - 5(II)",
            "question_text": "Write a C program to check if a number is prime.",
            "marks": 5,
            "answer": "```c\n#include <stdio.h>\n#include <math.h> // Required for sqrt()\n\nint main() {\n    int num, i, flag = 0;\n\n    // Input a number from the user\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\", &num);\n\n    // 0 and 1 are not prime numbers\n    if (num <= 1) {\n        flag = 1;\n    }\n\n    // Check for prime by testing divisibility from 2 to the square root of the number\n    for (i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            flag = 1; // Set flag to 1 if the number is divisible\n            break;\n        }\n    }\n\n    // Print the result based on the flag\n    if (flag == 0) {\n        printf(\"%d is a prime number.\\n\", num);\n    } else {\n        printf(\"%d is not a prime number.\\n\", num);\n    }\n\n    return 0;\n}\n```",
            "answer_source": "provided",
            "chapter": "Unit 2: Conditional Control -Statements :Simple if, if...else - Conditional Statements : else if and nested if - Conditional Statements : Switch case - Un-conditional Control Statements : break, continue, goto - Looping Control Statements: for, while, do.while - Looping Control Statements: nested for, nested while - Introduction to Arrays -One Dimensional (1D) Array Declaration and initialization - Accessing, Indexing and operations with 1D Arrays - Array Programs – 1D - Initializing and Accessing 2D Array, Array Programs – 2D - Pointer and address-of operators -Pointer Declaration and dereferencing, Void Pointers, 5 pointers Pointer based Array manipulation."
        },
        {
            "question_number": "SET 5 - 6",
            "question_text": "Explain different types of operators in C with examples.",
            "marks": 5,
            "answer": "**1. Arithmetic Operators:** Used for mathematical calculations.\n`+, -, *, /, % (modulus)`\n```c\nint a = 10, b = 3;\nprintf(\"Sum: %d\\n\", a + b); // 13\nprintf(\"Remainder: %d\\n\", a % b); // 1\n```\n\n**2. Relational Operators:** Used for comparison.\n`==, !=, >, <, >=, <=`\n```c\nint x = 10, y = 20;\nprintf(\"x < y: %d\\n\", x < y); // 1 (true)\nprintf(\"x == y: %d\\n\", x == y); // 0 (false)\n```\n\n**3. Logical Operators:** Used to combine conditional statements.\n`&& (AND), || (OR), ! (NOT)`\n```c\nint a = 1, b = 0;\nprintf(\"a && b: %d\\n\", a && b); // 0\nprintf(\"a || b: %d\\n\", a || b); // 1\nprintf(\"!a: %d\\n\", !a); // 0\n```\n\n**4. Assignment Operators:** Used to assign values to variables.\n`=, +=, -=, *=, /=`\n```c\nint x = 5;\nx += 3; // Equivalent to x = x + 3\nprintf(\"x = %d\\n\", x); // 8\n```",
            "answer_source": "provided",
            "chapter": "Unit 1: Evolution of Programming & Languages - Problem solving through programming - Writing algorithms & Pseudo code - Single line and multiline comments - Introduction to C: Structure of the C program - Input and output statements. Variables and identifiers, Constants, Keywords - Values, Names, Scope, Binding, Storage Classes - Numeric Data types: integer, floating point Non-Numeric Data types: char and string - L value and R value in expression, Increment and decrement operator - Comma, Arrow and Assignment operator, Bitwise and Size-of operator - Arithmetic, Relational and logical Operators - Condition Operators, Operator Precedence - Expressions with pre / post increment operator."
        },
        {
            "question_number": "SET 6 - 1",
            "question_text": "Differentiate between `=` and `==` operators in C.",
            "marks": 5,
            "answer": "**= (Assignment Operator):**\n- **Purpose:** Used to assign the value on its right to the variable on its left.\n- **Function:** It is used to store a value in a variable.\n- **Return Value:** It returns the value that was assigned.\n- **Example:**\n  `int x = 5;` // Assigns the value 5 to the variable x.\n\n**== (Equality Operator):**\n- **Purpose:** Used for comparison to check if the values on both sides are equal.\n- **Function:** It is used to compare two values, typically in conditional statements.\n- **Return Value:** It returns a boolean result: 1 (true) if the values are equal, and 0 (false) if they are not.\n- **Example:**\n  `if (a == b) { /* Code to execute if a equals b */ }`",
            "answer_source": "provided",
            "chapter": "Unit 1: Evolution of Programming & Languages - Problem solving through programming - Writing algorithms & Pseudo code - Single line and multiline comments - Introduction to C: Structure of the C program - Input and output statements. Variables and identifiers, Constants, Keywords - Values, Names, Scope, Binding, Storage Classes - Numeric Data types: integer, floating point Non-Numeric Data types: char and string - L value and R value in expression, Increment and decrement operator - Comma, Arrow and Assignment operator, Bitwise and Size-of operator - Arithmetic, Relational and logical Operators - Condition Operators, Operator Precedence - Expressions with pre / post increment operator."
        },
        {
            "question_number": "SET 6 - 2",
            "question_text": "Explain bitwise operators in C with examples.",
            "marks": 5,
            "answer": "Bitwise operators manipulate individual bits of integer values.\n\n**Bitwise AND (`&`):** The result bit is 1 only if both corresponding bits are 1.\n```c\nint a = 12; // 1100\nint b = 25; // 11001\n//   a & b -> 01000 (binary) = 8 (decimal)\nprintf(\"a & b = %d\\n\", a & b); // Output: 8\n```\n\n**Bitwise OR (`|`):** The result bit is 1 if at least one of the corresponding bits is 1.\n```c\n//   a | b -> 11101 (binary) = 29 (decimal)\nprintf(\"a | b = %d\\n\", a | b); // Output: 29\n```\n\n**Bitwise XOR (`^`):** The result bit is 1 if the corresponding bits are different.\n```c\n//   a ^ b -> 10101 (binary) = 21 (decimal)\nprintf(\"a ^ b = %d\\n\", a ^ b); // Output: 21\n```\n\n**Bitwise NOT (`~`):** Inverts all bits of an integer (1s become 0s and 0s become 1s). The result depends on the integer size and is often represented in 2's complement form.\n```c\nint a = 12;\nprintf(\"~a = %d\\n\", ~a); // Output: -13\n```",
            "answer_source": "provided",
            "chapter": "Unit 1: Evolution of Programming & Languages - Problem solving through programming - Writing algorithms & Pseudo code - Single line and multiline comments - Introduction to C: Structure of the C program - Input and output statements. Variables and identifiers, Constants, Keywords - Values, Names, Scope, Binding, Storage Classes - Numeric Data types: integer, floating point Non-Numeric Data types: char and string - L value and R value in expression, Increment and decrement operator - Comma, Arrow and Assignment operator, Bitwise and Size-of operator - Arithmetic, Relational and logical Operators - Condition Operators, Operator Precedence - Expressions with pre / post increment operator."
        },
        {
            "question_number": "SET 6 - 3",
            "question_text": "Explain the basic structure of a C program.",
            "marks": 5,
            "answer": "The basic structure of a C program consists of several sections:\n\n1.  **Preprocessor Directives:** These are lines beginning with `#` that instruct the compiler to perform certain actions before the actual compilation begins. The most common is `#include <stdio.h>`, which includes the standard input/output library.\n\n2.  **Function Prototypes (Optional):** Declarations of functions that are defined later in the program. This tells the compiler about the function's name, return type, and parameters.\n\n3.  **Main Function (`int main()`):** This is the entry point of every C program. Execution starts here. It returns an integer value to the operating system (0 for success).\n\n4.  **Declarations and Initialization:** Inside `main` (or other functions), you declare and initialize the variables you will use.\n\n5.  **Statements and Code Logic:** This is the main part of the program where you write the logic using operators, control statements (if, switch), loops (for, while), etc.\n\n6.  **Output:** Use functions like `printf()` to display results.\n\n7.  **Return Statement:** The `return 0;` statement at the end of `main` indicates successful program termination.\n\n8.  **Function Definitions (Optional):** The actual implementation of any functions declared in the prototypes.",
            "answer_source": "provided",
            "chapter": "Unit 1: Evolution of Programming & Languages - Problem solving through programming - Writing algorithms & Pseudo code - Single line and multiline comments - Introduction to C: Structure of the C program - Input and output statements. Variables and identifiers, Constants, Keywords - Values, Names, Scope, Binding, Storage Classes - Numeric Data types: integer, floating point Non-Numeric Data types: char and string - L value and R value in expression, Increment and decrement operator - Comma, Arrow and Assignment operator, Bitwise and Size-of operator - Arithmetic, Relational and logical Operators - Condition Operators, Operator Precedence - Expressions with pre / post increment operator."
        },
        {
            "question_number": "SET 6 - 4",
            "question_text": "Write a C program to print all numbers divisible by 3 from 1 to 100.",
            "marks": 5,
            "answer": "```c\n#include <stdio.h>\n\nint main() {\n    printf(\"Numbers divisible by 3 from 1 to 100 are:\\n\");\n    for (int i = 1; i <= 100; i++) {\n        if (i % 3 == 0) {\n            printf(\"%d \", i);\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```",
            "answer_source": "provided",
            "chapter": "Unit 2: Conditional Control -Statements :Simple if, if...else - Conditional Statements : else if and nested if - Conditional Statements : Switch case - Un-conditional Control Statements : break, continue, goto - Looping Control Statements: for, while, do.while - Looping Control Statements: nested for, nested while - Introduction to Arrays -One Dimensional (1D) Array Declaration and initialization - Accessing, Indexing and operations with 1D Arrays - Array Programs – 1D - Initializing and Accessing 2D Array, Array Programs – 2D - Pointer and address-of operators -Pointer Declaration and dereferencing, Void Pointers, 5 pointers Pointer based Array manipulation."
        },
        {
            "question_number": "SET 6 - 5",
            "question_text": "Develop a flowchart, pseudo code and a C program to calculate the speed of a car given distance in meters and time in seconds.",
            "marks": 5,
            "answer": "**Flowchart Description:**\nThe flowchart consists of ovals for 'Start' and 'Stop', parallelograms for 'Input distance (d) in meters' and 'Input time (t) in seconds', a rectangle for the process 'Calculate speed (s) = d / t', and another parallelogram for 'Display speed'. Arrows connect these shapes sequentially.\n\n**Pseudo Code:**\n1. Start\n2. Input distance (d) in meters\n3. Input time (t) in seconds\n4. Calculate speed (s) as d / t\n5. Display speed\n6. End\n\n**C Program:**\n```c\n#include <stdio.h>\n\nint main() {\n    double distance, time, speed;\n\n    // Step 2: Input distance in meters\n    printf(\"Enter the distance (in meters): \");\n    scanf(\"%lf\", &distance);\n\n    // Step 3: Input time in seconds\n    printf(\"Enter the time (in seconds): \");\n    scanf(\"%lf\", &time);\n\n    if (time > 0) {\n        // Step 4: Calculate speed (s) as d / t\n        speed = distance / time;\n        \n        // Step 5: Display speed\n        printf(\"The speed of the car is %.2lf meters per second.\\n\", speed);\n    } else {\n        printf(\"Error: Time must be greater than zero.\\n\");\n    }\n\n    return 0;\n}\n```\n**OUTPUT Example:**\nEnter the distance (in meters): 80\nEnter the time (in seconds): 16\nThe speed of the car is 5.00 meters per second.",
            "answer_source": "provided",
            "chapter": "Unit 1: Evolution of Programming & Languages - Problem solving through programming - Writing algorithms & Pseudo code - Single line and multiline comments - Introduction to C: Structure of the C program - Input and output statements. Variables and identifiers, Constants, Keywords - Values, Names, Scope, Binding, Storage Classes - Numeric Data types: integer, floating point Non-Numeric Data types: char and string - L value and R value in expression, Increment and decrement operator - Comma, Arrow and Assignment operator, Bitwise and Size-of operator - Arithmetic, Relational and logical Operators - Condition Operators, Operator Precedence - Expressions with pre / post increment operator."
        },
        {
            "question_number": "SET 6 - 5(II)",
            "question_text": "Develop an algorithm, flowchart, and a simple C program to convert kilometers to meters.",
            "marks": 5,
            "answer": "**Algorithm:**\n1. Start\n2. Initialize variables: kilometer, meter\n3. Input the value of kilometer\n4. Convert kilometer to meter by multiplying it by 1000 (1 kilometer = 1000 meters)\n5. Display the result (meter)\n6. End\n\n**Flowchart Description:**\nThe flowchart has a 'Start' oval, followed by a parallelogram for 'Input in kilometer'. Next is a rectangle for the process 'meters = kilometer * 1000'. Then a parallelogram for 'Display meters', and finally a 'Stop' oval.\n\n**C Program:**\n```c\n#include <stdio.h>\n\nint main() {\n    double kilometer, meter;\n\n    // Input kilometer\n    printf(\"Enter the distance in kilometers: \");\n    scanf(\"%lf\", &kilometer);\n\n    // Convert kilometer to meter\n    meter = kilometer * 1000;\n\n    // Display the result\n    printf(\"%.2lf kilometers is equal to %.2lf meters.\\n\", kilometer, meter);\n\n    return 0;\n}\n```",
            "answer_source": "provided",
            "chapter": "Unit 1: Evolution of Programming & Languages - Problem solving through programming - Writing algorithms & Pseudo code - Single line and multiline comments - Introduction to C: Structure of the C program - Input and output statements. Variables and identifiers, Constants, Keywords - Values, Names, Scope, Binding, Storage Classes - Numeric Data types: integer, floating point Non-Numeric Data types: char and string - L value and R value in expression, Increment and decrement operator - Comma, Arrow and Assignment operator, Bitwise and Size-of operator - Arithmetic, Relational and logical Operators - Condition Operators, Operator Precedence - Expressions with pre / post increment operator."
        },
        {
            "question_number": "SET 6 - 6(I)",
            "question_text": "Explain the `continue` statement in C with an example.",
            "marks": 5,
            "answer": "In C programming, the `continue` statement is used inside loops to control the flow of execution. When encountered, it immediately terminates the *current iteration* of the loop and transfers control to the loop's condition-checking expression to start the next iteration.\n\n**How it works:**\n- It bypasses the remaining code within the current loop iteration.\n- Unlike `break`, it does not exit the loop entirely but proceeds to the next cycle.\n\n**Example:** Print numbers from 1 to 5, but skip number 3.\n```c\n#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 5; i++) {\n        if (i == 3) {\n            printf(\"Skipping iteration %d\\n\", i);\n            continue; // Skip the rest of the loop's code for i == 3\n        }\n        printf(\"Processing iteration %d\\n\", i);\n    }\n    return 0;\n}\n```\n\n**OUTPUT:**\nProcessing iteration 1\nProcessing iteration 2\nSkipping iteration 3\nProcessing iteration 4\nProcessing iteration 5",
            "answer_source": "provided",
            "chapter": "Unit 2: Conditional Control -Statements :Simple if, if...else - Conditional Statements : else if and nested if - Conditional Statements : Switch case - Un-conditional Control Statements : break, continue, goto - Looping Control Statements: for, while, do.while - Looping Control Statements: nested for, nested while - Introduction to Arrays -One Dimensional (1D) Array Declaration and initialization - Accessing, Indexing and operations with 1D Arrays - Array Programs – 1D - Initializing and Accessing 2D Array, Array Programs – 2D - Pointer and address-of operators -Pointer Declaration and dereferencing, Void Pointers, 5 pointers Pointer based Array manipulation."
        },
        {
            "question_number": "SET 6 - 6(II)",
            "question_text": "Write a C program to print a right-angled triangle of asterisks.",
            "marks": 5,
            "answer": "```c\n#include <stdio.h>\n\nint main() {\n    int height;\n\n    // Ask the user for the height of the triangle\n    printf(\"Enter the height of the right-angled triangle: \");\n    scanf(\"%d\", &height);\n\n    // Check if the entered height is greater than 0\n    if (height <= 0) {\n        printf(\"Height must be a positive number.\\n\");\n        return 1; // Exit the program with an error code\n    }\n\n    // Outer loop to handle number of rows (i)\n    for (int i = 1; i <= height; i++) {\n        // Inner loop to handle number of asterisks in each row (k)\n        for (int k = 1; k <= i; k++) {\n            printf(\"*\");\n        }\n        // Move to the next line after each row is printed\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```\n**Example Output (for height = 5):**\n*\n**\n***\n****\n*****",
            "answer_source": "provided",
            "chapter": "Unit 2: Conditional Control -Statements :Simple if, if...else - Conditional Statements : else if and nested if - Conditional Statements : Switch case - Un-conditional Control Statements : break, continue, goto - Looping Control Statements: for, while, do.while - Looping Control Statements: nested for, nested while - Introduction to Arrays -One Dimensional (1D) Array Declaration and initialization - Accessing, Indexing and operations with 1D Arrays - Array Programs – 1D - Initializing and Accessing 2D Array, Array Programs – 2D - Pointer and address-of operators -Pointer Declaration and dereferencing, Void Pointers, 5 pointers Pointer based Array manipulation."
        }
    ]
}