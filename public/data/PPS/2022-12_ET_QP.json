{
    "paper_title": "21CSS101J-PROGRAMMING FOR PROBLEM SOLVING",
    "source": "2022-12 ET",
    "questions": [
        {
            "question_number": "1",
            "question_text": "1. The special character ___ can be used to declare a variable in C programming.\n(A) anything\n(B) nothing\n(C) underscore\n(D) hyphen",
            "marks": 1,
            "answer": "In C, variable names must start with a letter or an underscore. The underscore (`_`) is the only special character from the given options that can be used to start a variable name or be part of a variable name. Therefore, option (C) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 1: Evolution of Programming & Languages"
        },
        {
            "question_number": "2",
            "question_text": "2. which of the following is the default storage class for local variables in C programming language?\n(A) auto\n(C) static\n(B) register\n(D) extern",
            "marks": 1,
            "answer": "The default storage class for local variables (variables declared inside a function without any explicit storage class specifier) in C is `auto`. Therefore, option (A) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 1: Evolution of Programming & Languages"
        },
        {
            "question_number": "3",
            "question_text": "3. int a=5; int b=6; int x=a/b; printf(\"%d\",x);\noutput of the above code snippet:",
            "marks": 1,
            "answer": "In C, when `a` and `b` are integers, the division `a/b` performs integer division. So, `x = 5 / 6` results in `0`. The `printf(\"%d\",x)` statement will print the integer value of `x`. Therefore, the output is `0`. (Note: The options provided in the paper for this question are misaligned and belong to question 4).",
            "answer_source": "generated",
            "chapter": "Unit 1: Evolution of Programming & Languages"
        },
        {
            "question_number": "4",
            "question_text": "4. write the output of the following C code snippet:\nint s1=-10:\nint Q = (s1++, ++s1);\nprintf(\"%d\\n\", Q);\n(A) -8\n(C) 12\n(B) 11\n(D)-2",
            "marks": 1,
            "answer": "In the expression `(s1++, ++s1)`, the comma operator evaluates its left operand, discards the result, and then evaluates its right operand. The value of the entire expression is the value of the rightmost operand.\n1. `s1++`: `s1` is used as -10, then incremented to -9.\n2. `++s1`: `s1` is incremented to -8, then used.\nThe result of the comma expression is the value of `++s1` after both operations, which is -8. So, `Q` will be -8. Therefore, the output is -8. Option (A) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 1: Evolution of Programming & Languages"
        },
        {
            "question_number": "5",
            "question_text": "5. Rewrite the following code to use the conditional operator rather than using an if-else.\nif (age>=18) then print eligible to vote. Otherwise print not eligible to vote.\n(A) (age>=18)?: printf(\"eligible for voting\"), printf(\"not eligible for voting\");\n(C) (age>=18)? (printf('eligible for voting')); (printf('not eligible for voting'));\n(B) (age>-18) (printf(\"eligible for voting\")) ? (printf(\"not eligible for voting\"));\n(D) (age>=18)? (printf(\"eligible for voting\")): (printf(\"not eligible for voting\"));",
            "marks": 1,
            "answer": "The conditional operator (ternary operator) syntax is `condition ? expression_if_true : expression_if_false;`.\nThe given `if-else` statement: `if (age>=18) then print eligible to vote. Otherwise print not eligible to vote.`\nCorrectly translates to: `(age >= 18) ? printf(\"eligible for voting\") : printf(\"not eligible for voting\");`\nOption (D) correctly implements this syntax.",
            "answer_source": "generated",
            "chapter": "Unit 1: Evolution of Programming & Languages"
        },
        {
            "question_number": "6",
            "question_text": "6. Choose the correct answer for the following C code:\n#include<stdio.h>\nvoid main()\n{\nfor(int i=3; i<=6; i=i+2)\n{ printf(\"i-%d\",i);\nbreak;\n}\n}\n(A) i=3; i=5\n(C) error\n(B) i=3; i=4; i=5; i=6\n(D) i=3",
            "marks": 1,
            "answer": "The `for` loop initializes `i` to 3. The loop continues as long as `i <= 6`. The increment step is `i = i + 2`.\n1. **Iteration 1**: `i` is 3. The condition `3 <= 6` is true. `printf(\"i=%d\", i)` prints \"i=3\". The `break` statement is then encountered, which immediately terminates the loop.\nTherefore, the loop executes only once, and the output is \"i=3\". Option (D) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 2: Conditional Control -Statements"
        },
        {
            "question_number": "7",
            "question_text": "7. Select the output for the following C program:\n#include<stdio.h>\nvoid main()\n{\nfor(int i=1; i<5; i=i+4)\n{ printf(\"i=%d\", i);\ncontinue;\n}\n}\n(A) i=1; i-5\n(C) i=1; i-4;\n(B) i=1;\n(D) enor",
            "marks": 1,
            "answer": "The `for` loop initializes `i` to 1. The loop condition is `i < 5`. The increment step is `i = i + 4`.\n1. **Iteration 1**: `i` is 1. Condition `1 < 5` is true. `printf(\"i=%d\", i)` prints \"i=1\". The `continue` statement is executed, which skips the rest of the current iteration and proceeds to the next iteration's update expression (`i=i+4`).\n2. `i` is updated to `1 + 4 = 5`.\n3. **Iteration 2**: `i` is 5. Condition `5 < 5` is false. The loop terminates.\nTherefore, the output is \"i=1\". Option (B) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 2: Conditional Control -Statements"
        },
        {
            "question_number": "8",
            "question_text": "8. When you run the following code, how many times will the message \"Welcome\" appear on the screen?\n#include<stdio.h>\nvoid main()\n{ int k=5;\ndo\n{\nprintf(\"Welcome\\n\");\n11: k=k-1;\ngoto 11;\n}while (k<=2);\n}\n(A) one time\n(C) three times\n(B) two times\n(D) many times",
            "marks": 1,
            "answer": "The code initializes `k` to 5. Inside the `do` block, it prints \"Welcome\", then executes `k=k-1;` (which reduces `k` to 4), and then immediately `goto 11;` which jumps back to `k=k-1;`. This creates an infinite loop between `printf` and `goto 11;` before the `while` condition is ever checked. Thus, \"Welcome\" will be printed indefinitely (many times). Option (D) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 2: Conditional Control -Statements"
        },
        {
            "question_number": "9",
            "question_text": "9. Which keyword is used to declare character array in C?\n(A) arr\n(C) arr char\n(B) string\n(D) char",
            "marks": 1,
            "answer": "In C, a character array (which is used to store strings) is declared using the `char` keyword. For example, `char myString[10];`. Therefore, option (D) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 3: String Basics"
        },
        {
            "question_number": "10",
            "question_text": "10. What will be the output of the following when collects the input as HAVE A GOOD DAY?\n#include <stdio.h>\nvoid main()\n{\nchar a[5];\nscanf(\"%s\",a);\nprintf(\"%s\",a);\n}\n(A) HAVE A GOOD DAY\n(C) Nothing will be printed\n(B) HAVE\n(D) error",
            "marks": 1,
            "answer": "1. `char a[5];` declares a character array `a` that can hold 5 characters (4 actual characters + 1 null terminator `\\0`).\n2. `scanf(\"%s\",a);` reads a string from input. When the input is \"HAVE A GOOD DAY\", `scanf(\"%s\", ...)` reads characters until a whitespace is encountered or the buffer is full. It will read \"HAVE\".\n3. The string \"HAVE\" requires 4 characters + 1 null terminator, which perfectly fits into `a[5]`. So, `a` will contain \"HAVE\\0\".\n4. `printf(\"%s\",a);` will then print the content of `a` until it finds the null terminator.\nTherefore, the output will be \"HAVE\". Option (B) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 3: String Basics"
        },
        {
            "question_number": "11",
            "question_text": "11. If the two strings are identical, then strcmp() function returns\n(A) -1\n(C) 0\n(B) 1\n(D) yes",
            "marks": 1,
            "answer": "The `strcmp()` function in C compares two strings lexicographically. It returns `0` if the strings are identical, a negative value if the first string is lexicographically less than the second, and a positive value if the first string is lexicographically greater than the second. Therefore, if the two strings are identical, `strcmp()` returns `0`. Option (C) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 3: String Basics"
        },
        {
            "question_number": "12",
            "question_text": "12. Which is the correct option when collecting string variable s1 values as \"ABCD\" in the C programming language.\n(A) string s1 = \"ABCD\";\n(C) char s1=\"ABCD\";\n(B) char s1[10]=\"ABCD\";\n(D) string s1[10]=\"ABCD\";",
            "marks": 1,
            "answer": "In C, strings are represented as arrays of characters. The `string` keyword does not exist as a built-in data type.\nOptions (A) and (D) are incorrect because `string` is not a valid data type in C.\nOption (C) `char s1=\"ABCD\";` is syntactically incorrect for initializing a character array directly in C, as it doesn't specify size.\nOption (B) `char s1[10]=\"ABCD\";` correctly declares a character array `s1` of size 10 and initializes it with the string literal \"ABCD\", which also includes the null terminator `\\0` at the end. Therefore, option (B) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 3: String Basics"
        },
        {
            "question_number": "13",
            "question_text": "13. Which one of the following is the correct extension of the Python file?\n(A) python\n(C).numpy\n(B) .py\n(D) .p",
            "marks": 1,
            "answer": "Python source code files are typically saved with the `.py` file extension. Therefore, option (B) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 4: Python: Introduction to Python"
        },
        {
            "question_number": "14",
            "question_text": "14. What will be the output of the following function in Python?\nround(4.576)\n(A) 4\n(C) 4.5\n(B) 5\n(D) 4.6",
            "marks": 1,
            "answer": "The Python `round()` function with a single argument rounds to the nearest integer. If the fractional part is exactly 0.5, it rounds to the nearest even integer. For `4.576`, since the fractional part `0.576` is greater than `0.5`, it rounds up to the next integer. Therefore, `round(4.576)` will return `5`. Option (B) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 4: Python: Introduction to Python"
        },
        {
            "question_number": "15",
            "question_text": "15. Which of the following solution is correct when converting the given string, name=\"ABDUL KALAM\" to lower case in Python?\n(A) print(name.lower())\n(C) print(toLower(name))\n(B) print(name.toLower())\n(D) print(lower(name))",
            "marks": 1,
            "answer": "In Python, string objects have a built-in method called `lower()` that returns a new string with all characters converted to lowercase. The correct way to convert the string `name` to lowercase and print it is `print(name.lower())`. Therefore, option (A) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 4: Python: Introduction to Python"
        },
        {
            "question_number": "16",
            "question_text": "16. Which one of the following is used to get the current time in Python?\n(A) import time;\n(C) import Time;\n(B) import\nprint(time.asctime(time.localtime(time.time()ime; Print(localTime(time))\n(D) import time;\nPrint(Time.asctime(localTime.time(time))) print(localtime(time))",
            "marks": 1,
            "answer": "To get the current time in Python, the `time` module is typically used. The standard sequence is:\n1. `import time`\n2. `time.time()` gets the current time in seconds since the epoch.\n3. `time.localtime()` converts this to a time tuple.\n4. `time.asctime()` converts the time tuple to a readable string.\nOption (A), when corrected for potential OCR artifacts, `import time; print(time.asctime(time.localtime(time.time())))`, represents the correct usage. Therefore, option (A) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 4: Python: Introduction to Python"
        },
        {
            "question_number": "17",
            "question_text": "17. What is the output of the given Python code?\nx='10'\ny = '20'\nresult = eval('x + y')\nprint(result)\n(A) xy\n(C) 1020\n(B) 30\n(D) x+y",
            "marks": 1,
            "answer": "1. `x='10'` and `y='20'` assign string values to variables `x` and `y`.\n2. `eval('x + y')` evaluates the string `'x + y'` as a Python expression. Within this evaluation, `x` and `y` refer to the string variables. The `+` operator for strings performs concatenation.\n3. So, `'x' + 'y'` becomes `'10' + '20'`, which results in the string `'1020'`.\n4. `print(result)` will print this concatenated string.\nTherefore, the output is `1020`. Option (C) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 4: Python: Introduction to Python"
        },
        {
            "question_number": "18",
            "question_text": "18. Select the appropriate output of the provided Python code.\nimport numpy as np\narr = np.zeros((1,2), dtype = int)\nprint(arr)\n(A) [[12]]\n(C) [01]\n(B) [[11],[22]]\n(D) [[00]]",
            "marks": 1,
            "answer": "1. `import numpy as np` imports the NumPy library.\n2. `arr = np.zeros((1,2), dtype = int)` creates a NumPy array.\n   - `(1,2)` specifies the shape: 1 row and 2 columns.\n   - `dtype = int` specifies that the elements should be integers.\n   - `np.zeros()` initializes all elements to zero.\n3. The resulting array will be `[[0, 0]]`.\n4. `print(arr)` will display this array.\nTherefore, the output is `[[0 0]]` (or `[[00]]` as represented in the option). Option (D) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 5: Creating NumPy Array"
        },
        {
            "question_number": "19",
            "question_text": "19. What will be the output of the following Python code?\nimport pandas as pd\ns=pd.Series([1,2,3,4,5],index= ['a','b','c','d','e'])\nprint(s['c'])\n(A) 5\n(C) 3\n(B) 'c'\n(D) D",
            "marks": 1,
            "answer": "1. `import pandas as pd` imports the Pandas library.\n2. `s = pd.Series([1,2,3,4,5], index= ['a','b','c','d','e'])` creates a Pandas Series named `s`. The data values are `[1,2,3,4,5]` and their corresponding index labels are `['a','b','c','d','e']`.\n3. `print(s['c'])` accesses the element in the Series `s` that has the index label `'c'`.\n4. According to the Series definition, the index `'c'` corresponds to the data value `3`.\nTherefore, the output will be `3`. Option (C) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 5: Introduction to Pandas"
        },
        {
            "question_number": "20",
            "question_text": "20. To count the total number of elements in a dataframe in Python, we can use:\n(A) len\n(C) size\n(B) count\n(D) Values",
            "marks": 1,
            "answer": "In Pandas:\n- `len(dataframe)` returns the number of rows.\n- `dataframe.size` returns the total number of elements (rows * columns) in the DataFrame.\n- `dataframe.count()` returns the number of non-null values for each column (or row).\n- `dataframe.values` returns a NumPy array representation of the DataFrame's data.\nThe question asks for the \"total number of elements\" which is provided by the `size` attribute. Therefore, option (C) is correct.",
            "answer_source": "generated",
            "chapter": "Unit 5: Simple Operations with Data frames"
        },
        {
            "question_number": "21",
            "question_text": "21. Venkat owns a boutique. He is dealing with an excel file that contains attributes such as the customerID, the Quantity purchased by the customer, the Amount of each item, and the Total-price. In his C programme, he wishes to define the aforementioned attributes as variables with appropriate data types such as character-array, integer, float, and double and assign sample values to them using assignment statements. Find the size of the various data types of the specified variables and calculate Total-price. Assist him in writing a C programme for the mentioned purpose.",
            "marks": 10,
            "answer": "```c\n#include <stdio.h>\n#include <string.h> // Required for strcpy\n\nint main() {\n    // 1. Define variables with appropriate data types\n    int customerID;\n    int quantityPurchased;\n    float amountPerItem; // Using float for individual item amounts\n    double totalPrice;   // Using double for higher precision in total calculations\n    char customerName[50]; // Character array for customer name\n\n    // 2. Assign sample values using assignment statements\n    customerID = 1001;\n    quantityPurchased = 5;\n    amountPerItem = 150.75f; // 'f' suffix indicates float literal\n    strcpy(customerName, \"Alice Wonderland\"); // Assign a string to the char array\n\n    // Calculate Total-price\n    totalPrice = (double)quantityPurchased * amountPerItem;\n\n    // 3. Find the size of the various data types\n    printf(\"--- Data Type Sizes (on this system) ---\\n\");\n    printf(\"Size of int: %zu bytes\\n\", sizeof(int));\n    printf(\"Size of float: %zu bytes\\n\", sizeof(float));\n    printf(\"Size of double: %zu bytes\\n\", sizeof(double));\n    printf(\"Size of char: %zu byte\\n\", sizeof(char));\n    printf(\"Size of char array (customerName[50]): %zu bytes\\n\", sizeof(customerName));\n    printf(\"\\n\");\n\n    // 4. Print sample values and calculated Total-price\n    printf(\"--- Sample Transaction Details ---\\n\");\n    printf(\"Customer ID: %d\\n\", customerID);\n    printf(\"Customer Name: %s\\n\", customerName);\n    printf(\"Quantity Purchased: %d\\n\", quantityPurchased);\n    printf(\"Amount Per Item: %.2f\\n\", amountPerItem);\n    printf(\"Calculated Total Price: %.2lf\\n\", totalPrice); // Use %lf for double\n\n    return 0;\n}\n```\n\n**Explanation:**\n1.  **Data Type Selection:**\n    *   `customerID` and `quantityPurchased` are declared as `int` for whole numbers.\n    *   `amountPerItem` is `float` for typical monetary values, and `totalPrice` is `double` to ensure higher precision in financial calculations.\n    *   `customerName` is a `char` array, which is the standard way to handle strings in C.\n2.  **Assignment of Sample Values:** Values are assigned using the `=` operator for numeric types and `strcpy()` (from `string.h`) for the character array `customerName`, as direct assignment for arrays is not allowed in C after declaration.\n3.  **Calculation:** `totalPrice` is calculated by multiplying `quantityPurchased` and `amountPerItem`. A `(double)` cast is used on one of the operands to promote the calculation to double-precision before storing it in `totalPrice`.\n4.  **`sizeof` Operator:** The `sizeof` operator is used to determine the memory allocated for each data type and the character array, printing its size in bytes. The `%zu` format specifier is used for `size_t`, which is the type returned by `sizeof`.\n5.  **Output:** `printf()` statements are used to display the assigned values, the sizes of the data types, and the calculated total price. `%.2f` and `%.2lf` are used to format floating-point numbers to two decimal places.",
            "answer_source": "generated",
            "chapter": "Unit 1: Evolution of Programming & Languages"
        },
        {
            "question_number": "22",
            "question_text": "22. Write a C program to calculate the following series using for loop.\nSum = 1/32 +2/43 + 3/54 + 4/65 +\nand print the result along with the series as the given format: when n=4; 1/32 + 2/43 + 3/54+4+65 = 0.14768 similarly, print the result according to the nth term.",
            "marks": 10,
            "answer": "The series to calculate is: Sum = `1/3^2 + 2/4^3 + 3/5^4 + 4/6^5 + ... + n/(n+2)^(n+1)`.\n\n```c\n#include <stdio.h>\n#include <math.h> // Required for the pow() function\n\nint main() {\n    int n; // Number of terms\n    double sum = 0.0; // Use double for sum to maintain precision\n\n    printf(\"Enter the number of terms (n) for the series: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Series: \");\n    for (int i = 1; i <= n; i++) {\n        // Current term is i / (i+2)^(i+1)\n        double numerator = (double)i;\n        double base_denominator = (double)(i + 2);\n        double exponent_denominator = (double)(i + 1);\n\n        // Calculate (i+2)^(i+1)\n        double term_denominator = pow(base_denominator, exponent_denominator);\n\n        // Calculate the current term\n        double term = numerator / term_denominator;\n\n        // Add to the total sum\n        sum += term;\n\n        // Print the current term in the series format\n        printf(\"%d/%d^%d\", i, (i + 2), (i + 1));\n        if (i < n) {\n            printf(\" + \");\n        }\n    }\n    printf(\" = %.5lf\\n\", sum); // Print the final sum formatted to 5 decimal places\n\n    return 0;\n}\n```\n\n**Explanation:**\n1.  **Headers:** `stdio.h` for input/output and `math.h` for the `pow()` function (which calculates powers).\n2.  **Input `n`:** The program prompts the user to enter the number of terms `n` for the series.\n3.  **`for` loop:** A `for` loop iterates from `i = 1` to `n`, calculating each term of the series.\n4.  **Term Calculation:**\n    *   The numerator for the `i`-th term is `i`.\n    *   The base of the denominator is `(i + 2)`.\n    *   The exponent of the denominator is `(i + 1)`.\n    *   All components are cast to `double` before calculations to ensure floating-point arithmetic and prevent integer truncation.\n    *   `pow(base, exponent)` calculates `base^exponent`.\n5.  **Summation:** Each calculated `term` is added to the `sum` variable, which is declared as `double` to maintain precision.\n6.  **Output:** The program prints each term of the series, separated by `+`, and then displays the final `sum` formatted to five decimal places (`%.5lf`), matching the example format `0.14768`.",
            "answer_source": "generated",
            "chapter": "Unit 2: Conditional Control -Statements"
        },
        {
            "question_number": "23",
            "question_text": "23. Write a C program for the following using user-defined function with arguments: Collect four student's names such as \"Dheetshitha\", \"Dharshika\", \"Jai\" and \"Dev\" while declaring the variable \"Names\" using character array and assignment statement. Get any name from the user and then check whether the given name entered by the user is available in the specified character array. If it is available, then print the appropriate position of the given name otherwise print position as -1",
            "marks": 10,
            "answer": "```c\n#include <stdio.h>\n#include <string.h> // Required for strcmp() and strcpy()\n\n// Function prototype declaration\n// This function searches for a target name within a 2D character array (array of strings)\n// It returns the 0-based index if found, or -1 otherwise.\nint findNamePosition(char names[][50], int numNames, const char* targetName);\n\nint main() {\n    // Declare a 2D character array to store four student names\n    // Each name can be up to 49 characters long + 1 for the null terminator.\n    char studentNames[4][50];\n    int numberOfStudents = 4;\n\n    // Assign the given names to the character array using strcpy()\n    strcpy(studentNames[0], \"Dheetshitha\");\n    strcpy(studentNames[1], \"Dharshika\");\n    strcpy(studentNames[2], \"Jai\");\n    strcpy(studentNames[3], \"Dev\");\n\n    char searchName[50]; // Buffer to store the name entered by the user\n    int position;\n\n    printf(\"Enter a student name to search: \");\n    // Read user input safely, including spaces if any\n    fgets(searchName, sizeof(searchName), stdin);\n\n    // Remove the trailing newline character that fgets might read\n    searchName[strcspn(searchName, \"\\n\")] = '\\0';\n\n    // Call the user-defined function to find the name's position\n    position = findNamePosition(studentNames, numberOfStudents, searchName);\n\n    // Print the result based on the function's return value\n    if (position != -1) {\n        printf(\"The name '%s' is found at position: %d (0-based index)\\n\", searchName, position);\n    } else {\n        printf(\"The name '%s' is not found. Position: %d\\n\", searchName, position);\n    }\n\n    return 0;\n}\n\n// Function definition\nint findNamePosition(char names[][50], int numNames, const char* targetName) {\n    for (int i = 0; i < numNames; i++) {\n        // Compare the target name with each name in the array\n        // strcmp returns 0 if the strings are identical\n        if (strcmp(names[i], targetName) == 0) {\n            return i; // Name found, return its index\n        }\n    }\n    return -1; // Name not found after checking all entries\n}\n```\n\n**Explanation:**\n1.  **Headers:** `stdio.h` for standard input/output and `string.h` for string manipulation functions like `strcpy()` (string copy) and `strcmp()` (string compare).\n2.  **`studentNames` Declaration and Initialization:** A 2D character array `studentNames[4][50]` is declared to hold four names, with each name allowing up to 49 characters plus a null terminator (`\\0`). `strcpy()` is used to assign the initial names, as direct assignment with `=` doesn't work for C arrays after their declaration.\n3.  **`findNamePosition` Function (User-Defined):**\n    *   **Prototype:** `int findNamePosition(char names[][50], int numNames, const char* targetName);` declares the function. `char names[][50]` is the correct way to pass a 2D array (array of strings) to a function, where the second dimension (size of each string) must be specified. `const char* targetName` indicates that the target name will not be modified within the function.\n    *   **Logic:** It iterates through each string in the `names` array using a `for` loop.\n    *   `strcmp(names[i], targetName)`: This function compares the `i`-th stored name with the `targetName`. It returns `0` if they are identical.\n    *   If a match is found, the function immediately returns the current `i` (the 0-based index).\n    *   If the loop completes without finding a match, it means the name is not in the list, and the function returns `-1`.\n4.  **`main` Function:**\n    *   It prompts the user to enter a name to search for.\n    *   `fgets()` is used for safer input (to prevent buffer overflows and read strings with spaces) into `searchName`.\n    *   `searchName[strcspn(searchName, \"\\n\")] = '\\0';` removes the newline character that `fgets()` might include at the end of the input.\n    *   It calls `findNamePosition()` and stores the returned index in the `position` variable.\n    *   Finally, it prints whether the name was found and its position, or if it was not found, prints -1.",
            "answer_source": "generated",
            "chapter": "Unit 3: String Basics"
        },
        {
            "question_number": "24",
            "question_text": "24. Hema runs a fruit shop. She collects the customer-name with age and purchased fruit names. Help her to save the sample collected information using the following Python data types:\ni) list\nii) tuple\niii) dict\niv) set\nv) boolean",
            "marks": 10,
            "answer": "Hema needs to store structured information for each customer: a name (string), an age (integer), and a list of purchased fruit names (multiple strings). Here's how each specified Python data type can be utilized:\n\n**i) List (`list`)**\n*   **Description:** An ordered, mutable (changeable) collection of items. Items can be of different data types. Lists are suitable for sequences where order matters and elements might be added or removed.\n*   **Application:** A list could store a collection of customer records (where each record is a tuple or dictionary). It's also ideal for storing the *list of purchased fruit names* for a single customer.\n*   **Example:**\n    ```python\n    # Storing purchased fruit names for one customer\n    purchased_fruits_list = [\"Apple\", \"Banana\", \"Orange\", \"Apple\"]\n    print(f\"Fruits: {purchased_fruits_list}\")\n\n    # Storing multiple customer records, where each record is a list of [name, age, [fruits]]\n    customers_list_of_lists = [\n        [\"Hema\", 30, [\"Apple\", \"Banana\"]],\n        [\"John\", 25, [\"Grapes\", \"Mango\", \"Apple\"]]\n    ]\n    print(f\"Hema's age: {customers_list_of_lists[0][1]}\")\n    ```\n\n**ii) Tuple (`tuple`)**\n*   **Description:** An ordered, immutable (unchangeable) collection of items. Once created, elements of a tuple cannot be changed. They are often used for fixed collections of related data, providing a sense of structural integrity.\n*   **Application:** A tuple is excellent for representing a single customer's fixed attributes (name, age) together. The list of fruits, being mutable, could be an element within the tuple.\n*   **Example:**\n    ```python\n    # Storing a single customer's record as a tuple: (name, age, list_of_fruits)\n    customer_record_tuple = (\"Hema\", 30, [\"Apple\", \"Banana\", \"Orange\"])\n    print(f\"Customer Name: {customer_record_tuple[0]}\")\n    print(f\"Customer Fruits: {customer_record_tuple[2]}\")\n\n    # A collection of customer tuples within a list\n    customers_list_of_tuples = [\n        (\"Hema\", 30, [\"Apple\", \"Banana\"]),\n        (\"John\", 25, [\"Grapes\", \"Mango\"])\n    ]\n    ```\n\n**iii) Dictionary (`dict`)**\n*   **Description:** An unordered (insertion-ordered from Python 3.7+), mutable collection of key-value pairs. Keys must be unique and immutable, while values can be of any data type. Dictionaries provide a highly readable and flexible way to store structured data.\n*   **Application:** This is arguably the most suitable data type for representing a single customer's complete information, where each piece of data (name, age, fruits) has a meaningful label (key).\n*   **Example:**\n    ```python\n    # Storing a single customer's information as a dictionary\n    customer_info_dict = {\n        \"customer_name\": \"Hema\",\n        \"age\": 30,\n        \"purchased_fruits\": [\"Apple\", \"Banana\", \"Orange\"]\n    }\n    print(f\"Customer: {customer_info_dict['customer_name']}, Age: {customer_info_dict['age']}\")\n\n    # Storing multiple customer records as a list of dictionaries (most common approach)\n    all_customers = [\n        {\"customer_name\": \"Hema\", \"age\": 30, \"purchased_fruits\": [\"Apple\", \"Banana\"]},\n        {\"customer_name\": \"John\", \"age\": 25, \"purchased_fruits\": [\"Grapes\", \"Mango\", \"Strawberry\"]}\n    ]\n    print(f\"All customers: {all_customers[0]['customer_name']}\")\n    ```\n\n**iv) Set (`set`)**\n*   **Description:** An unordered, mutable collection of unique items. Sets automatically remove duplicate elements. They are primarily used for membership testing, removing duplicates, and mathematical set operations (union, intersection).\n*   **Application:** A set could be used specifically for storing the *unique* purchased fruit names for a customer, if Hema only cares about the distinct types of fruits bought, without considering order or duplicates.\n*   **Example:**\n    ```python\n    # Storing unique purchased fruits for a customer\n    unique_purchased_fruits = {\"Apple\", \"Banana\", \"Orange\", \"Apple\"} # 'Apple' appears only once\n    print(f\"Unique Fruits: {unique_purchased_fruits}\")\n\n    # Can be an element within a dictionary for a customer record\n    customer_info_with_set = {\n        \"customer_name\": \"Hema\",\n        \"age\": 30,\n        \"unique_fruits\": {\"Apple\", \"Banana\", \"Orange\"}\n    }\n    ```\n\n**v) Boolean (`bool`)**\n*   **Description:** A data type representing truth values: `True` or `False`. Booleans are often the result of comparison operations or are used for conditional logic.\n*   **Application:** While not suitable for storing the main customer details themselves, a boolean could be used as an *attribute* within a customer's record (e.g., in a dictionary) to indicate a specific status, like whether they are a loyalty member or have a discount.\n*   **Example:**\n    ```python\n    customer_info_with_boolean = {\n        \"customer_name\": \"Hema\",\n        \"age\": 30,\n        \"purchased_fruits\": [\"Apple\", \"Banana\"],\n        \"is_loyalty_member\": True\n    }\n    print(f\"Is Hema a loyalty member? {customer_info_with_boolean['is_loyalty_member']}\")\n    ```\n\n**Conclusion:** For storing Hema's customer information (name, age, and purchased fruits), a **list of dictionaries** (`[{...}, {...}]`) or a **list of tuples** (`[(...), (...)]`) would be the most practical. The dictionary approach offers the best readability and maintainability due to its named keys for attributes.",
            "answer_source": "generated",
            "chapter": "Unit 4: Python: Introduction to Python"
        },
        {
            "question_number": "25",
            "question_text": "25. Distinguish between PANDAS with NUMPY using different comparison parameters in Python programming language.",
            "marks": 10,
            "answer": "NumPy (Numerical Python) and Pandas (Python Data Analysis Library) are both foundational libraries for scientific computing and data analysis in Python. Pandas is built on top of NumPy, but they serve different roles and offer distinct features.\n\nHere's a distinction between Pandas and NumPy based on various comparison parameters:\n\n| Parameter           | NumPy (Numerical Python)                                  | Pandas (Python Data Analysis Library)                             |\n| :------------------ | :-------------------------------------------------------- | :---------------------------------------------------------------- |\n| **Core Data Structures** | `ndarray` (N-dimensional array) \u2013 a homogeneous, fixed-size array of items. | `Series` (1D labeled array) and `DataFrame` (2D labeled tabular data). Both are built on NumPy arrays. |\n| **Primary Purpose** | Efficient numerical computation, array-oriented programming, mathematical operations, scientific computing. | Data manipulation, analysis, and cleaning; especially for tabular and time-series data. |\n| **Data Types**      | Primarily handles homogeneous data: all elements in an `ndarray` must be of the same data type. | Handles heterogeneous data: different columns in a `DataFrame` can have different data types (e.g., one column `int`, another `string`). |\n| **Indexing/Labeling** | Integer-based indexing (0, 1, 2, ...) by default. Supports advanced indexing, but not explicit labels. | Explicit, user-defined labels/indices for rows and columns. Allows for more intuitive data lookup and alignment. |\n| **Missing Data**    | Uses `NaN` (Not a Number) for missing values, primarily in floating-point arrays. Less direct support for varied missing data representations. | Robustly handles missing data (`NaN`). Provides rich functionality like `isnull()`, `notnull()`, `dropna()`, `fillna()` for easy management. |\n| **Functionality**   | Provides a vast collection of mathematical functions (linear algebra, Fourier transforms, random number generation, etc.), array reshaping, broadcasting. | Offers powerful tools for data alignment, time series functionality, merging, joining, pivoting, grouping (`groupby`), and flexible I/O to various file formats (CSV, Excel, SQL, etc.). |\n| **Performance**     | Highly optimized for numerical operations on large arrays due to C/Fortran backend. Generally faster for pure numerical computations. | Also highly optimized (leveraging NumPy's speed), but may have some overhead due to managing labels and heterogeneous data types. |\n| **Flexibility**     | Lower-level library; fundamental building block for numerical tasks. Offers fine-grained control over array operations. | Higher-level abstraction; designed for common data analysis workflows. More opinionated about data organization (tabular). |\n| **Statistical Operations** | Basic statistical functions (e.g., `mean()`, `std()`, `min()`, `max()`) on entire arrays or specific axes. | Richer set of descriptive statistics, often applied column-wise or row-wise, with built-in handling for missing values and hierarchical data. |\n| **Time Series Support** | Basic date and time data types, but lacks high-level time series manipulation. | Excellent built-in support for time series data, including date range generation, frequency conversion, shifting, and resampling. |\n\n**Conclusion:**\nNumPy is the fundamental library for numerical operations on arrays in Python, providing efficiency for homogeneous data. Pandas, built upon NumPy, extends this capability by introducing labeled data structures (`Series` and `DataFrame`) that are specifically designed for efficient data manipulation, analysis, and cleaning of structured, often heterogeneous, tabular data. While NumPy is the engine, Pandas provides the high-level tools for handling the complexities of real-world datasets.",
            "answer_source": "generated",
            "chapter": "Unit 5: Creating NumPy Array"
        },
        {
            "question_number": "26",
            "question_text": "26. Lakshmi writes a sentence in her notebook. She wants to count the number of uppercase characters, lowercase characters, digits and special symbols in her sentence. Help her to find using a C program.",
            "marks": 10,
            "answer": "```c\n#include <stdio.h>\n#include <string.h> // Required for strcspn()\n#include <ctype.h>  // Required for isupper(), islower(), isdigit()\n\nint main() {\n    char sentence[1000]; // Declare a character array to store the sentence\n    int uppercase_count = 0;\n    int lowercase_count = 0;\n    int digit_count = 0;\n    int special_symbol_count = 0;\n    int i;\n\n    printf(\"Enter a sentence: \");\n    // Read the sentence including spaces safely\n    fgets(sentence, sizeof(sentence), stdin);\n\n    // Remove the trailing newline character that fgets often reads\n    sentence[strcspn(sentence, \"\\n\")] = '\\0';\n\n    // Iterate through each character of the sentence\n    for (i = 0; sentence[i] != '\\0'; i++) {\n        char ch = sentence[i];\n\n        if (isupper(ch)) {\n            uppercase_count++;\n        } else if (islower(ch)) {\n            lowercase_count++;\n        } else if (isdigit(ch)) {\n            digit_count++;\n        } else {\n            // Any character not classified as upper, lower, or digit is a special symbol\n            special_symbol_count++;\n        }\n    }\n\n    // Print the counts\n    printf(\"\\n--- Character Counts ---\\n\");\n    printf(\"Uppercase characters: %d\\n\", uppercase_count);\n    printf(\"Lowercase characters: %d\\n\", lowercase_count);\n    printf(\"Digits: %d\\n\", digit_count);\n    printf(\"Special symbols (including spaces and punctuation): %d\\n\", special_symbol_count);\n\n    return 0;\n}\n```\n\n**Explanation:**\n1.  **Include Headers:**\n    *   `stdio.h`: For standard input/output functions like `printf()` and `fgets()`.\n    *   `string.h`: For `strcspn()`, used to remove the newline character from `fgets()` input.\n    *   `ctype.h`: Provides character classification functions like `isupper()`, `islower()`, and `isdigit()`, which are crucial for categorizing characters.\n2.  **Declare Variables:**\n    *   `sentence[1000]`: A `char` array to store the input sentence. A large size is chosen to accommodate longer sentences.\n    *   `uppercase_count`, `lowercase_count`, `digit_count`, `special_symbol_count`: Integer variables initialized to `0` to keep track of the counts.\n3.  **Get Input:**\n    *   `fgets(sentence, sizeof(sentence), stdin);` is used to read the entire line of input from the user, including spaces, and store it safely in `sentence`. `sizeof(sentence)` prevents buffer overflow.\n    *   `sentence[strcspn(sentence, \"\\n\")] = '\\0';` removes the trailing newline character (`\\n`) that `fgets()` typically includes, ensuring accurate string processing.\n4.  **Iterate and Classify:**\n    *   A `for` loop iterates through each character of the `sentence` until the null terminator (`\\0`) is encountered.\n    *   Inside the loop, `ch` holds the current character.\n    *   `if-else if-else` statements, along with `isupper()`, `islower()`, and `isdigit()` functions, are used to determine the type of each character and increment the corresponding counter.\n    *   Any character that does not fall into the uppercase, lowercase, or digit categories is counted as a `special_symbol` (this includes spaces, punctuation, etc.).\n5.  **Print Results:** Finally, the program prints the total counts for each category.",
            "answer_source": "generated",
            "chapter": "Unit 3: String Basics"
        },
        {
            "question_number": "27",
            "question_text": "27. Two examinations were conducted for three groups of students namely Team 1, Team 2, Team 3 and their data on average of marks for the subjects Tamil, English, Science and Mathematics are given below in the form of matrices X and Y. Find the total marks of both the examinations for all the three groups using C programming language and print the results.\nTeam1 22 15 14 23\nX= Team2 50 62 21 30\nTeam3 53 80 32 40\nTeam1 20 38 15 40\nY = Team2 18 12 17 80\nTeam3 81 47 52 18",
            "marks": 15,
            "answer": "To find the total marks for each team across both examinations, we need to perform matrix addition on matrices X and Y. The resulting matrix will represent the sum of marks for each subject for each team.\n\n**Matrix X (Exam 1 Marks):**\n```\n22 15 14 23\n50 62 21 30\n53 80 32 40\n```\n\n**Matrix Y (Exam 2 Marks):**\n```\n20 38 15 40\n18 12 17 80\n81 47 52 18\n```\n\n**C Program:**\n```c\n#include <stdio.h>\n\n#define NUM_TEAMS 3   // Number of student groups\n#define NUM_SUBJECTS 4 // Number of subjects\n\nint main() {\n    // Matrix X: Marks from Examination 1\n    int matrixX[NUM_TEAMS][NUM_SUBJECTS] = {\n        {22, 15, 14, 23}, // Team 1: Tamil, English, Science, Mathematics\n        {50, 62, 21, 30}, // Team 2\n        {53, 80, 32, 40}  // Team 3\n    };\n\n    // Matrix Y: Marks from Examination 2\n    int matrixY[NUM_TEAMS][NUM_SUBJECTS] = {\n        {20, 38, 15, 40}, // Team 1\n        {18, 12, 17, 80}, // Team 2\n        {81, 47, 52, 18}  // Team 3\n    };\n\n    // Matrix to store Total Marks (X + Y)\n    int totalMarks[NUM_TEAMS][NUM_SUBJECTS];\n\n    // Subject names for clearer output\n    char *subjects[NUM_SUBJECTS] = {\"Tamil\", \"English\", \"Science\", \"Maths\"};\n\n    printf(\"--- Marks from Examination X ---\\n\");\n    for (int i = 0; i < NUM_TEAMS; i++) {\n        printf(\"Team %d: \", i + 1);\n        for (int j = 0; j < NUM_SUBJECTS; j++) {\n            printf(\"%4d\", matrixX[i][j]); // Print with fixed width for alignment\n        }\n        printf(\"\\n\");\n    }\n\n    printf(\"\\n--- Marks from Examination Y ---\\n\");\n    for (int i = 0; i < NUM_TEAMS; i++) {\n        printf(\"Team %d: \", i + 1);\n        for (int j = 0; j < NUM_SUBJECTS; j++) {\n            printf(\"%4d\", matrixY[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    // Calculate total marks by adding corresponding elements of matrixX and matrixY\n    printf(\"\\n--- Total Marks (Examination X + Y) ---\\n\");\n    printf(\"         %-10s%-10s%-10s%-10s\\n\", subjects[0], subjects[1], subjects[2], subjects[3]);\n    printf(\"---------------------------------------------------\\n\");\n\n    for (int i = 0; i < NUM_TEAMS; i++) {\n        printf(\"Team %d | \", i + 1);\n        for (int j = 0; j < NUM_SUBJECTS; j++) {\n            totalMarks[i][j] = matrixX[i][j] + matrixY[i][j];\n            printf(\"%-10d\", totalMarks[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```\n\n**Explanation:**\n1.  **Matrix Declaration:** Two 2D integer arrays, `matrixX` and `matrixY`, are declared and initialized with the given marks. A third 2D array, `totalMarks`, is declared to store the result of the addition.\n2.  **Constants:** `#define` directives are used for `NUM_TEAMS` and `NUM_SUBJECTS` to improve code readability and maintainability.\n3.  **Subject Names Array:** An array of character pointers `subjects` is used to store the names of the subjects. This helps in printing more descriptive output.\n4.  **Matrix Addition Logic:** Nested `for` loops are used to iterate through each element of the matrices. For each corresponding position `[i][j]`, the values from `matrixX` and `matrixY` are added and stored in `totalMarks[i][j]`.\n5.  **Output:** The program first prints the initial matrices `X` and `Y` for reference. Then, it prints the `totalMarks` matrix in a formatted table, showing the combined score for each subject for each team. The `printf` format specifiers (`%4d`, `%-10s`, `%-10d`) are used for proper alignment and readability.",
            "answer_source": "generated",
            "chapter": "Unit 2: Conditional Control -Statements"
        },
        {
            "question_number": "28",
            "question_text": "28. Raman has two boxes, both of which are coloured blue and green. The blue colour box only holds two chocolates, whereas the green box holds ten. He wants to use the quantity of chocolates in his boxes to do mathematical operations like addition, subtraction, and multiplication. Help him by implementing the following user-defined functions in a C program:\ni. void add();\nii. void subtract(int, int);\niii. int multiply(int, int);",
            "marks": 15,
            "answer": "This C program demonstrates the implementation of the three specified user-defined functions: `add()`, `subtract()`, and `multiply()`, performing operations based on the given chocolate counts.\n\n```c\n#include <stdio.h>\n\n// Define the quantities of chocolates in the boxes as global constants\n// This allows them to be accessed by functions without explicit passing,\n// especially for 'add()' which takes no arguments.\n#define BLUE_BOX_CHOCOLATES 2\n#define GREEN_BOX_CHOCOLATES 10\n\n// i. Function to add the chocolates from both boxes\n// This function takes no arguments and returns no value (void).\nvoid add() {\n    int total_chocolates = BLUE_BOX_CHOCOLATES + GREEN_BOX_CHOCOLATES;\n    printf(\"--- Operation: Addition ---\\n\");\n    printf(\"Chocolates in Blue Box: %d\\n\", BLUE_BOX_CHOCOLATES);\n    printf(\"Chocolates in Green Box: %d\\n\", GREEN_BOX_CHOCOLATES);\n    printf(\"Total Chocolates (Blue + Green): %d\\n\", total_chocolates);\n    printf(\"-------------------------------\\n\");\n}\n\n// ii. Function to subtract two given integer quantities\n// This function takes two integer arguments and returns no value (void).\nvoid subtract(int val1, int val2) {\n    int result = val1 - val2;\n    printf(\"--- Operation: Subtraction ---\\n\");\n    printf(\"Subtracting %d from %d: %d\\n\", val2, val1, result);\n    printf(\"-------------------------------\\n\");\n}\n\n// iii. Function to multiply two given integer quantities\n// This function takes two integer arguments and returns an integer value.\nint multiply(int val1, int val2) {\n    int product = val1 * val2;\n    printf(\"--- Operation: Multiplication ---\\n\");\n    printf(\"Multiplying %d by %d: %d\\n\", val1, val2, product);\n    printf(\"-------------------------------\\n\");\n    return product; // Return the computed product\n}\n\nint main() {\n    printf(\"Raman's Chocolate Box Operations:\\n\");\n    printf(\"Initial Chocolates: Blue Box = %d, Green Box = %d\\n\", BLUE_BOX_CHOCOLATES, GREEN_BOX_CHOCOLATES);\n    printf(\"===================================\\n\\n\");\n\n    // Calling the 'add' function (no arguments, no return value)\n    add();\n\n    // Calling the 'subtract' function with different scenarios\n    subtract(GREEN_BOX_CHOCOLATES, BLUE_BOX_CHOCOLATES); // Green Box - Blue Box\n    subtract(50, 15); // Example with arbitrary values\n\n    // Calling the 'multiply' function and storing/using its return value\n    int boxes_product = multiply(BLUE_BOX_CHOCOLATES, GREEN_BOX_CHOCOLATES);\n    printf(\"Product of chocolates in boxes (from returned value): %d\\n\", boxes_product);\n    printf(\"\\n\");\n\n    int custom_product = multiply(7, 8); // Example with arbitrary values\n    printf(\"Custom multiplication product (from returned value): %d\\n\", custom_product);\n\n    printf(\"\\n===================================\\n\");\n\n    return 0;\n}\n```\n\n**Explanation:**\n1.  **Global Constants:** `BLUE_BOX_CHOCOLATES` and `GREEN_BOX_CHOCOLATES` are defined using `#define`. This makes them accessible from any function without being explicitly passed as arguments, suitable for functions like `add()` that have no parameters. They are constants as their values are fixed.\n2.  **`void add()` Function:**\n    *   **Signature:** `void add()` indicates that the function takes no arguments and returns no value.\n    *   **Logic:** It directly accesses the global chocolate counts, calculates their sum, and prints the result.\n3.  **`void subtract(int val1, int val2)` Function:**\n    *   **Signature:** `void subtract(int val1, int val2)` indicates it takes two integer arguments (`val1`, `val2`) and returns no value.\n    *   **Logic:** It performs `val1 - val2` and prints the outcome. This function is more general as it can subtract any two integers, not just the box chocolate counts.\n4.  **`int multiply(int val1, int val2)` Function:**\n    *   **Signature:** `int multiply(int val1, int val2)` indicates it takes two integer arguments and returns an integer value.\n    *   **Logic:** It calculates `val1 * val2`, prints the operation, and then `return`s the product. The `main` function can then capture and use this returned value.\n5.  **`main()` Function:**\n    *   Demonstrates how to call each user-defined function.\n    *   `add()` is called directly.\n    *   `subtract()` is called twice with different sets of arguments to show its reusability.\n    *   `multiply()` is called, and its integer return value is stored in `boxes_product` or `custom_product` variables, which are then printed, showcasing how to use functions that return values.",
            "answer_source": "generated",
            "chapter": "Unit 3: String Basics"
        }
    ]
}