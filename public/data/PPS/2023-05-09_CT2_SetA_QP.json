{
  "paper_title": "Programming For Problem Solving",
  "source": "2023-05-09 CT2 SetA",
  "questions": [
    {
      "question_number": "1",
      "question_text": "What will be the value of var for the following C statement?\nvar =strcmp(\"Hello\",\"World\");\na) -1 b) 0 c) 1d) strcmp has void return-type",
      "marks": 1,
      "answer": "The `strcmp` function compares two strings lexicographically. It returns a negative value if the first string is lexicographically smaller than the second, 0 if they are equal, and a positive value if the first string is lexicographically larger. In this case, 'H' (from \"Hello\") comes before 'W' (from \"World\"), so \"Hello\" is lexicographically smaller than \"World\". Therefore, `strcmp(\"Hello\",\"World\")` will return a negative value. Among the given options, -1 is the only negative value.\nCorrect option: a) -1",
      "answer_source": "generated",
      "chapter": "Unit 3: String Basics - String Declaration"
    },
    {
      "question_number": "2",
      "question_text": "Which pre-defined function returns a pointer to the last occurrence of a character in a string?\na) strchr(s, c); b) strrchr(s, c); c) strlchr(s, c); d) strfchr(s, c);",
      "marks": 1,
      "answer": "The `strrchr()` function (string reverse character) searches for the last occurrence of a specific character in a given string and returns a pointer to that location. `strchr()` finds the first occurrence.\nCorrect option: b) strrchr(s, c);",
      "answer_source": "generated",
      "chapter": "Unit 3: String Basics - String Declaration"
    },
    {
      "question_number": "3",
      "question_text": "The ______ function appends not more than n characters.\na) strcat() b) strcon() c) strncat() d) memcat()",
      "marks": 1,
      "answer": "The `strncat()` function is used to concatenate (append) a specified number of characters from a source string to a destination string. It appends at most `n` characters.\nCorrect option: c) strncat()",
      "answer_source": "generated",
      "chapter": "Unit 3: String Basics - String Declaration"
    },
    {
      "question_number": "4",
      "question_text": "Which of the following symbols is used to make single line comments in python?\na) # b) * c) \" d) \"\"\"",
      "marks": 1,
      "answer": "In Python, the hash symbol (`#`) is used to denote a single-line comment. Any text following `#` on the same line is ignored by the interpreter.\nCorrect option: a) #",
      "answer_source": "generated",
      "chapter": "Unit 4: Python: Introduction to Python"
    },
    {
      "question_number": "5",
      "question_text": "What will be the output of the following statement if the user has entered 20 as the value of x?\nx=input(\"enter a number:\")\nprint(10+x)\na) 1010 b) 30 c) 20 d) 2010",
      "marks": 1,
      "answer": "In Python 3, the `input()` function always returns a string. So, if the user enters `20`, `x` will be the string `\"20\"`. The expression `10 + x` attempts to add an integer (`10`) and a string (`\"20\"`). This operation results in a `TypeError` because Python does not implicitly convert types for arithmetic operations in this manner. However, since `TypeError` is not an option and this type of question often implies an intended integer operation for beginners, if we were to assume `x` was explicitly converted to an integer (e.g., `x = int(input(\"...\"))`), then `x` would be `20` (integer), and `10 + 20` would be `30`.\nCorrect option: b) 30 (Assuming implicit or intended integer conversion for arithmetic operation, which is common in beginner-level multiple-choice questions when `TypeError` is not an option.)",
      "answer_source": "generated",
      "chapter": "Unit 4: Python: Introduction to Python"
    },
    {
      "question_number": "6",
      "question_text": "A variable defined outside a function is referred to as\na) local variable b) only variable c) global variable d) not defined",
      "marks": 1,
      "answer": "A variable defined outside any function, typically at the top level of a script or program, is known as a global variable. It can be accessed and modified from anywhere within the program, including inside functions (though modification usually requires specific keywords in some languages, like `global` in Python).\nCorrect option: c) global variable",
      "answer_source": "generated",
      "chapter": "Unit 1: Evolution of Programming & Languages"
    },
    {
      "question_number": "7",
      "question_text": "When dealing with identifiers, Python is case sensitive or not?\na) yes b) no c) machine dependent d) program dependent",
      "marks": 1,
      "answer": "Python is a case-sensitive language. This means that `myVariable`, `myvariable`, and `MyVariable` are all treated as distinct identifiers. For example, `print` is a built-in function, but `Print` would be an undefined name.\nCorrect option: a) yes",
      "answer_source": "generated",
      "chapter": "Unit 4: Python: Introduction to Python"
    },
    {
      "question_number": "8",
      "question_text": "How many times will Python execute the code inside the following while loop? You should answer the question without using the interpreter! Justify your answers.\ni = 0\nwhile i < 0 and i >2:\nprint \"Hello ...‚Äù\ni=i+1\na) 1 b) 2 c) 0 d) 4",
      "marks": 1,
      "answer": "The `while` loop condition is `i < 0 and i > 2`. When `i` is initialized to `0`, the first part of the condition `i < 0` (i.e., `0 < 0`) is `False`. Since the condition uses `and`, if any part is `False`, the entire condition is `False`. Therefore, `False and i > 2` evaluates to `False`. The loop condition is `False` from the very beginning, so the code inside the loop will never be executed.\nCorrect option: c) 0",
      "answer_source": "generated",
      "chapter": "Unit 4: Python: Introduction to Python"
    },
    {
      "question_number": "9",
      "question_text": "List any four string functions along with suitable example.",
      "marks": 4,
      "answer": "Here are four common string functions in C with examples:\n\n1.  **`strlen(char *str)`**: Calculates the length of a string (excluding the null terminator).\n    *   **Example:**\n        ```c\n        #include <stdio.h>\n        #include <string.h>\n        int main() {\n            char str[] = \"Hello\";\n            printf(\"Length of '%s' is %d\\n\", str, strlen(str)); // Output: Length of 'Hello' is 5\n            return 0;\n        }\n        ```\n\n2.  **`strcpy(char *dest, const char *src)`**: Copies the string pointed to by `src` (including the null terminator) to the array pointed to by `dest`.\n    *   **Example:**\n        ```c\n        #include <stdio.h>\n        #include <string.h>\n        int main() {\n            char source[] = \"C Programming\";\n            char destination[20];\n            strcpy(destination, source);\n            printf(\"Copied string: %s\\n\", destination); // Output: Copied string: C Programming\n            return 0;\n        }\n        ```\n\n3.  **`strcat(char *dest, const char *src)`**: Appends the string pointed to by `src` to the end of the string pointed to by `dest`.\n    *   **Example:**\n        ```c\n        #include <stdio.h>\n        #include <string.h>\n        int main() {\n            char s1[50] = \"Hello\";\n            char s2[] = \" World\";\n            strcat(s1, s2);\n            printf(\"Concatenated string: %s\\n\", s1); // Output: Concatenated string: Hello World\n            return 0;\n        }\n        ```\n\n4.  **`strcmp(const char *str1, const char *str2)`**: Compares two strings lexicographically. Returns 0 if equal, a negative value if `str1` is less than `str2`, and a positive value if `str1` is greater than `str2`.\n    *   **Example:**\n        ```c\n        #include <stdio.h>\n        #include <string.h>\n        int main() {\n            char s1[] = \"apple\";\n            char s2[] = \"banana\";\n            char s3[] = \"apple\";\n\n            printf(\"strcmp(s1, s2): %d\\n\", strcmp(s1, s2)); // Output: a negative value (e.g., -1)\n            printf(\"strcmp(s1, s3): %d\\n\", strcmp(s1, s3)); // Output: 0\n            return 0;\n        }\n        ```",
      "answer_source": "generated",
      "chapter": "Unit 3: String Basics - String Declaration"
    },
    {
      "question_number": "10",
      "question_text": "What is commenting python? Write its types with simple example.",
      "marks": 4,
      "answer": "In Python, comments are lines of text within a program that are ignored by the interpreter during execution. Their purpose is to make code more understandable for humans by providing explanations, notes, or documentation about the code's functionality, logic, or purpose. They are crucial for code readability, maintenance, and collaboration.\n\nPython supports two main types of comments:\n\n1.  **Single-line Comments:**\n    *   These comments start with the hash symbol (`#`). Any text from `#` to the end of the line is considered a comment.\n    *   They are typically used for brief notes, explanations for a single line of code, or temporarily disabling a line of code.\n    *   **Example:**\n        ```python\n        # This is a single-line comment\n        name = \"Alice\"  # Assigning a string to the 'name' variable\n        print(name)     # Printing the value of name\n        ```\n\n2.  **Multi-line Comments (Docstrings or String Literals):**\n    *   Python does not have a dedicated syntax for multi-line comments like some other languages (e.g., `/* ... */` in C/Java). However, multi-line strings (enclosed in triple quotes, `'''...'''` or `\"\"\"...\"\"\"`) are often used as comments or, more specifically, as **docstrings**.\n    *   **As general multi-line comments:** If a triple-quoted string is not assigned to a variable or is not the first statement in a module, class, or function, it acts like a multi-line comment.\n    *   **As docstrings:** When a triple-quoted string is placed immediately after the definition of a function, method, class, or module, it becomes a docstring. Docstrings are used to document code and can be accessed at runtime using `__doc__` attribute or `help()` function.\n    *   **Example (Multi-line comment):**\n        ```python\n        '''\n        This is a multi-line comment.\n        It explains a block of code or its purpose.\n        The interpreter will ignore this if not a docstring.\n        '''\n        def add_numbers(a, b):\n            \"\"\"This is a docstring for the add_numbers function.\n            It takes two numbers and returns their sum.\"\"\"\n            return a + b\n\n        result = add_numbers(5, 3)\n        print(result)\n        ```",
      "answer_source": "generated",
      "chapter": "Unit 4: Python: Introduction to Python"
    },
    {
      "question_number": "11",
      "question_text": "What is the difference between a tuple and a list?",
      "marks": 4,
      "answer": "In Python, both lists and tuples are used to store collections of items. However, they have fundamental differences, primarily regarding their mutability and syntax.\n\nHere are the key differences between a tuple and a list:\n\n1. **Mutability**:\n   - **List**: Mutable. Elements can be changed, added, or removed after creation.\n   - **Tuple**: Immutable. Elements cannot be changed, added, or removed after creation.\n\n2. **Syntax**:\n   - **List**: Defined using square brackets, e.g., `[1, 2, 3]`.\n   - **Tuple**: Defined using parentheses, e.g., `(1, 2, 3)`. A single-element tuple requires a trailing comma, e.g., `(1,)`.\n\n3. **Methods**:\n   - **List**: Has many methods for modification, such as `append()`, `insert()`, `remove()`, and `sort()`.\n   - **Tuple**: Has fewer methods, mainly `count()` and `index()`, since it cannot be modified.\n\n4. **Performance**:\n   - **List**: Slightly slower for iteration and access due to mutability overhead.\n   - **Tuple**: Slightly faster and uses less memory because it is immutable.\n\n5. **Use Cases**:\n   - **List**: Used for collections of items that may change during program execution (e.g., a list of tasks).\n   - **Tuple**: Used for collections of items that should not change (e.g., coordinates, RGB color codes). Tuples can be used as dictionary keys because they are immutable.\n\n6. **Example**:\n   - **List**: `my_list = [1, 'apple', 3.14]`\n   - **Tuple**: `my_tuple = (10, 'banana', True)`\n\nIn essence, lists are for collections that are expected to evolve, while tuples are for collections of related items that are meant to be constant.",
      "answer_source": "generated",
      "chapter": "Unit 4: Python: Introduction to Python"
    },
    {
      "question_number": "12a",
      "question_text": "Write a C program to count total number of alphabets, digits or special characters in a string using loop. How to find total number of alphabets, digits and special characters in a string in C programming.",
      "marks": 10,
      "answer": "To count the total number of alphabets, digits, and special characters in a string in C, you can iterate through each character of the string using a loop and use character classification functions from the `<ctype.h>` library (`isalpha()`, `isdigit()`, `isalnum()`).\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h> // For isalpha(), isdigit(), isalnum()\n\nint main() {\n    char str[100]; // Declare a character array to store the string\n    int alphabets = 0;\n    int digits = 0;\n    int specialChars = 0;\n    int i = 0;\n\n    printf(\"Enter a string: \");\n    // Read string including spaces until newline\n    fgets(str, sizeof(str), stdin);\n\n    // Remove trailing newline character if present from fgets\n    str[strcspn(str, \"\\n\")] = 0;\n\n    // Iterate through the string until the null terminator is found\n    while (str[i] != '\\0') {\n        if (isalpha(str[i])) {\n            alphabets++;\n        } else if (isdigit(str[i])) {\n            digits++;\n        } else if (isspace(str[i])) {\n            // Optionally, you can count spaces separately or ignore them.\n            // For this problem, spaces are often considered special characters\n            // if not specifically excluded.\n            // We will count non-alphanumeric, non-space as special.\n        } else {\n            specialChars++;\n        }\n        i++;\n    }\n\n    printf(\"\\n--- Character Counts ---\\n\");\n    printf(\"Alphabets: %d\\n\", alphabets);\n    printf(\"Digits: %d\\n\", digits);\n    printf(\"Special Characters: %d\\n\", specialChars);\n\n    return 0;\n}\n```\n\n**Explanation of how to find the total number:**\n\n1.  **Include Headers:** You need `<stdio.h>` for input/output, `<string.h>` for string manipulation functions (like `strcspn`), and crucially, `<ctype.h>` for character classification functions.\n2.  **Declare Variables:**\n    *   `str[100]`: A character array to hold the input string. Ensure it's large enough.\n    *   `alphabets`, `digits`, `specialChars`: Integer counters initialized to `0` to store the counts.\n    *   `i`: An integer index for iterating through the string.\n3.  **Get Input:** Use `fgets()` to read the string from the user. `fgets()` is preferred over `scanf(\"%s\", ...)` because it can read strings containing spaces. `fgets()` also includes the newline character, so `str[strcspn(str, \"\\n\")] = 0;` is used to remove it.\n4.  **Loop Through the String:** A `while` loop iterates through the string character by character until it encounters the null terminator (`'\\0'`), which marks the end of a C string.\n5.  **Character Classification:** Inside the loop, for each character `str[i]`:\n    *   `isalpha(str[i])`: This function returns a non-zero value (true) if the character is an alphabet (uppercase A-Z or lowercase a-z), and `0` (false) otherwise. If true, `alphabets` counter is incremented.\n    *   `isdigit(str[i])`: If not an alphabet, this function checks if the character is a digit (0-9). If true, `digits` counter is incremented.\n    *   `isspace(str[i])`: This function checks for whitespace characters (space, tab, newline, etc.). Depending on problem definition, spaces could be counted as special, ignored, or counted separately. In the provided example, if it's not an alphabet or a digit, and not a space, it's categorized as a `specialChar`.\n    *   **Else (Special Character):** If a character is neither an alphabet nor a digit (and not a space as handled by `isspace` implicitly for `specialChars`), it's considered a special character, and `specialChars` counter is incremented.\n6.  **Print Results:** After the loop finishes, the final counts for alphabets, digits, and special characters are printed.",
      "answer_source": "generated",
      "chapter": "Unit 3: String Basics - String Declaration"
    },
    {
      "question_number": "12b",
      "question_text": "With the help of Call by Value and Call by reference function, Swap the values of the two variables x & y. Also state the difference between call by value and call by reference.",
      "marks": 10,
      "answer": "**Swapping Values using Call by Value and Call by Reference in C**\n\n**1. Call by Value (Does NOT swap original values)**\n\nIn call by value, a copy of the actual parameters' values is passed to the formal parameters of the function. Any changes made to the formal parameters inside the function do not affect the original actual parameters.\n\n```c\n#include <stdio.h>\n\n// Function to attempt to swap two integers using Call by Value\nvoid swapByValue(int a, int b) {\n    printf(\"Inside swapByValue - Before swap: a = %d, b = %d\\n\", a, b);\n    int temp = a;\n    a = b;\n    b = temp;\n    printf(\"Inside swapByValue - After swap: a = %d, b = %d\\n\", a, b);\n}\n\nint main() {\n    int x = 10;\n    int y = 20;\n\n    printf(\"Main - Before calling swapByValue: x = %d, y = %d\\n\", x, y);\n    swapByValue(x, y); // Pass copies of x and y\n    printf(\"Main - After calling swapByValue: x = %d, y = %d\\n\", x, y); // x and y remain unchanged\n\n    return 0;\n}\n```\n**Output:**\n```\nMain - Before calling swapByValue: x = 10, y = 20\nInside swapByValue - Before swap: a = 10, b = 20\nInside swapByValue - After swap: a = 20, b = 10\nMain - After calling swapByValue: x = 10, y = 20\n```\nAs seen, `x` and `y` in `main` are unchanged.\n\n**2. Call by Reference (Successfully swaps original values)**\n\nIn call by reference, the addresses of the actual parameters are passed to the formal parameters. This means the function receives pointers to the original variables. Any changes made through these pointers inside the function directly affect the original variables in the calling function.\n\n```c\n#include <stdio.h>\n\n// Function to swap two integers using Call by Reference\nvoid swapByReference(int *ptrA, int *ptrB) {\n    printf(\"Inside swapByReference - Before swap: *ptrA = %d, *ptrB = %d\\n\", *ptrA, *ptrB);\n    int temp = *ptrA; // Dereference to get the value\n    *ptrA = *ptrB;    // Dereference to change the value at the address\n    *ptrB = temp;\n    printf(\"Inside swapByReference - After swap: *ptrA = %d, *ptrB = %d\\n\", *ptrA, *ptrB);\n}\n\nint main() {\n    int x = 10;\n    int y = 20;\n\n    printf(\"Main - Before calling swapByReference: x = %d, y = %d\\n\", x, y);\n    swapByReference(&x, &y); // Pass addresses of x and y\n    printf(\"Main - After calling swapByReference: x = %d, y = %d\\n\", x, y); // x and y are swapped\n\n    return 0;\n}\n```\n**Output:**\n```\nMain - Before calling swapByReference: x = 10, y = 20\nInside swapByReference - Before swap: *ptrA = 10, *ptrB = 20\nInside swapByReference - After swap: *ptrA = 20, *ptrB = 10\nMain - After calling swapByReference: x = 20, y = 10\n```\nAs seen, `x` and `y` in `main` are successfully swapped.\n\n**Difference between Call by Value and Call by Reference**\n\n| Feature             | Call by Value                                         | Call by Reference                                         |\n|---------------------|------------------------------------------------------|----------------------------------------------------------|\n| Argument Passing    | Copies of actual parameter values are passed.         | Addresses (references) of actual parameters are passed.   |\n| Data Flow           | Unidirectional (from caller to callee).               | Bidirectional (from caller to callee and vice versa).     |\n| Modification        | Changes to formal parameters do NOT affect actual parameters. | Changes to formal parameters (via dereferencing pointers) DO affect actual parameters. |\n| Memory              | Separate memory is allocated for formal parameters (copies). | Formal parameters (pointers) hold the memory addresses of actual parameters; no new memory for data is created. |\n| Safety              | Safer, as original values are protected from accidental modification. | Less safe, as original values can be unintentionally modified. |\n| Use Cases           | When you only need to read values or perform operations without altering the original data. | When you need to modify the original data in the calling function (e.g., swapping, passing large structures/arrays efficiently). |\n| Overhead            | Potential overhead if large data structures are copied. | Lower overhead for large data structures as only addresses are copied. |\n| Example             | `void func(int x, int y);`                            | `void func(int *x, int *y);`                             |",
      "answer_source": "generated",
      "chapter": "Unit 3: String Basics - String Declaration"
    },
    {
      "question_number": "13a",
      "question_text": "Write the python program to read three integer inputs from the user and print the largest.",
      "marks": 10,
      "answer": "Here's a Python program to read three integer inputs from the user and print the largest among them. This can be achieved using conditional statements (`if-elif-else`) or by using the built-in `max()` function.\n\n**Method 1: Using `if-elif-else` statements**\n\n```python\nprint(\"Enter three integers to find the largest.\")\n\n# Read the first integer input from the user\nnum1 = int(input(\"Enter the first number: \"))\n\n# Read the second integer input from the user\nnum2 = int(input(\"Enter the second number: \"))\n\n# Read the third integer input from the user\nnum3 = int(input(\"Enter the third number: \"))\n\n# Determine the largest using conditional statements\nif num1 >= num2 and num1 >= num3:\n    largest = num1\nelif num2 >= num1 and num2 >= num3:\n    largest = num2\nelse:\n    largest = num3\n\n# Print the largest number\nprint(f\"The largest number among {num1}, {num2}, and {num3} is: {largest}\")\n```\n\n**Method 2: Using the built-in `max()` function (more concise)**\n\nPython provides a convenient built-in function `max()` that can take multiple arguments and return the largest among them.\n\n```python\nprint(\"Enter three integers to find the largest.\")\n\n# Read the first integer input from the user\nnum1 = int(input(\"Enter the first number: \"))\n\n# Read the second integer input from the user\nnum2 = int(input(\"Enter the second number: \"))\n\n# Read the third integer input from the user\nnum3 = int(input(\"Enter the third number: \"))\n\n# Use the max() function to find the largest\nlargest = max(num1, num2, num3)\n\n# Print the largest number\nprint(f\"The largest number among {num1}, {num2}, and {num3} is: {largest}\")\n```\nBoth programs achieve the same result. The `max()` function method is generally preferred for its conciseness and readability.",
      "answer_source": "generated",
      "chapter": "Unit 4: Python: Introduction to Python"
    },
    {
      "question_number": "13b",
      "question_text": "Write a python code to take a string input from the user. Reverse the first three characters and print the reversed string as an output. If the string does not consist at least three characters, it should print \"Insufficient\".",
      "marks": 10,
      "answer": "```python\n# Take a string input from the user\nuser_string = input(\"Enter a string: \")\n\n# Check if the string has at least three characters\nif len(user_string) < 3:\n    print(\"Insufficient\")\nelse:\n    # Extract the first three characters\n    first_three_chars = user_string[0:3]\n\n    # Reverse the first three characters\n    # Slicing with [::-1] reverses a string/sequence\n    reversed_first_three = first_three_chars[::-1]\n\n    # Get the rest of the string (from the 3rd character onwards)\n    remaining_string = user_string[3:]\n\n    # Concatenate the reversed first three characters with the remaining string\n    final_string = reversed_first_three + remaining_string\n\n    # Print the final modified string\n    print(\"The modified string is:\", final_string)\n\n```\n\n**Explanation:**\n\n1.  **`user_string = input(\"Enter a string: \")`**: This line prompts the user to enter a string and stores it in the `user_string` variable.\n2.  **`if len(user_string) < 3:`**: This conditional statement checks the length of the input string using `len()`. If the length is less than 3, it means the string does not have at least three characters.\n3.  **`print(\"Insufficient\")`**: If the condition in step 2 is true, this message is printed as required.\n4.  **`else:`**: If the string has 3 or more characters, the code inside this block is executed.\n5.  **`first_three_chars = user_string[0:3]`**: This uses string slicing to extract the first three characters of `user_string`. `[0:3]` means characters from index 0 up to (but not including) index 3.\n6.  **`reversed_first_three = first_three_chars[::-1]`**: This is a common Python idiom for reversing a string or sequence. `[::-1]` creates a reversed copy of the `first_three_chars` string.\n7.  **`remaining_string = user_string[3:]`**: This extracts the part of the string starting from the character at index 3 until the end.\n8.  **`final_string = reversed_first_three + remaining_string`**: The reversed first three characters are concatenated with the rest of the original string to form the `final_string`.\n9.  **`print(\"The modified string is:\", final_string)`**: The resulting string is printed to the console.",
      "answer_source": "generated",
      "chapter": "Unit 4: Python: Introduction to Python"
    },
    {
      "question_number": "14a",
      "question_text": "Explain the data types in python.",
      "marks": 10,
      "answer": "In Python, data types are classifications that specify which type of value a variable can hold. Python is dynamically typed, meaning you don't need to declare the data type of a variable explicitly; the interpreter infers it at runtime. Here are the major built-in data types in Python:\n\n1.  **Numeric Types:** Used to store numerical values.\n    *   **`int` (Integers):** Whole numbers, positive or negative, without a decimal point. They can be of arbitrary precision (limited only by available memory).\n        *   *Example:* `age = 30`, `count = -5`\n    *   **`float` (Floating-point numbers):** Real numbers with a decimal point. Used for representing fractional values.\n        *   *Example:* `price = 19.99`, `pi = 3.14159`\n    *   **`complex` (Complex numbers):** Numbers with a real and imaginary part, represented as `x + yj` or `x + yJ`.\n        *   *Example:* `z = 2 + 3j`\n\n2.  **Boolean Type:** Used to store truth values.\n    *   **`bool` (Boolean):** Represents one of two values: `True` or `False`. Used in logical operations and conditional statements.\n        *   *Example:* `is_active = True`, `has_permission = False`\n\n3.  **Sequence Types:** Ordered collections of items, where each item can be accessed by its index.\n    *   **`str` (Strings):** Immutable sequences of Unicode characters. Used for text data. Defined using single, double, or triple quotes.\n        *   *Example:* `name = \"Alice\"`, `message = 'Hello World'`, `paragraph = \"\"\"Multi-line text.\"\"\"`\n    *   **`list` (Lists):** Mutable, ordered sequences of items. Items can be of different data types. Defined using square brackets `[]`.\n        *   *Example:* `numbers = [1, 2, 3]`, `mixed_list = [\"apple\", 10, True]`\n    *   **`tuple` (Tuples):** Immutable, ordered sequences of items. Items can be of different data types. Defined using parentheses `()`.\n        *   *Example:* `coordinates = (10, 20)`, `rgb_color = ('red', 255, 0)`\n\n4.  **Mapping Type:** An unordered collection of key-value pairs.\n    *   **`dict` (Dictionaries):** Mutable, unordered collections of key-value pairs. Keys must be unique and immutable (e.g., strings, numbers, tuples), while values can be of any type. Defined using curly braces `{}`.\n        *   *Example:* `person = {\"name\": \"Bob\", \"age\": 25}`, `settings = {'theme': 'dark', 'notifications': True}`\n\n5.  **Set Types:** Unordered collections of unique items.\n    *   **`set` (Sets):** Mutable, unordered collections of unique and immutable items. Used for mathematical set operations like union, intersection, etc. Defined using curly braces `{}` (excluding empty set which is `set()`).\n        *   *Example:* `fruits = {\"apple\", \"banana\", \"cherry\"}`\n    *   **`frozenset` (Frozensets):** Immutable version of a set. Can be used as dictionary keys or elements of another set.\n        *   *Example:* `immutable_set = frozenset([1, 2, 3])`\n\n6.  **None Type:**\n    *   **`NoneType` (None):** Represents the absence of a value. It is a unique object of its own data type `NoneType`. It's often used to signify that a variable has not been assigned a value, or that a function doesn't return anything meaningful.\n        *   *Example:* `result = None`\n\nUnderstanding these data types is fundamental to writing effective Python programs, as they dictate how data is stored, manipulated, and behaves within your code.",
      "answer_source": "generated",
      "chapter": "Unit 4: Python: Introduction to Python"
    },
    {
      "question_number": "14b",
      "question_text": "Explain function and module with suitable example",
      "marks": 10,
      "answer": "**Functions in Python**\n\nA **function** is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing. They allow you to break down a complex problem into smaller, manageable parts.\n\n**Key Characteristics:**\n*   **Reusability:** Once defined, a function can be called multiple times, avoiding code duplication.\n*   **Modularity:** Functions help organize code into logical, distinct units.\n*   **Abstraction:** Users of the function don't need to know its internal working, only what it does and what inputs it takes.\n\n**Syntax:**\n```python\ndef function_name(parameters):\n    \"\"\"Docstring: Explain what the function does.\"\"\"\n    # Function body (code to be executed)\n    return result # Optional: return a value\n```\n\n**Example of a Function:**\n```python\ndef greet(name):\n    \"\"\"This function takes a name as an argument and prints a greeting.\"\"\"\n    return f\"Hello, {name}! Welcome to Python programming.\"\n\n# Calling the function\nmessage1 = greet(\"Alice\")\nprint(message1)\n\nmessage2 = greet(\"Bob\")\nprint(message2)\n\n# Example of a function without return value explicitly (returns None)\ndef print_sum(a, b):\n    print(f\"The sum of {a} and {b} is {a + b}\")\n\nprint_sum(10, 5)\n```\n**Output:**\n```\nHello, Alice! Welcome to Python programming.\nHello, Bob! Welcome to Python programming.\nThe sum of 10 and 5 is 15\n```\n\n---\n\n**Modules in Python**\n\nA **module** is simply a file containing Python code (definitions of functions, classes, and variables). It's a way to organize related code into a single file. By using modules, you can logically organize your Python code, making it easier to manage and reuse. When you import a module, you get access to all the definitions inside it.\n\n**Key Characteristics:**\n*   **Organization:** Groups related functions, classes, and variables.\n*   **Reusability:** Code defined in a module can be imported and used in other Python scripts or interactive sessions.\n*   **Namespace:** Each module has its own namespace, preventing name clashes between objects from different modules.\n\n**Creating a Module:**\nLet's create a file named `my_calculations.py` with some functions:\n\n```python\n# my_calculations.py\n\ndef add(x, y):\n    \"\"\"Returns the sum of two numbers.\"\"\"\n    return x + y\n\ndef subtract(x, y):\n    \"\"\"Returns the difference of two numbers.\"\"\"\n    return x - y\n\ndef multiply(x, y):\n    \"\"\"Returns the product of two numbers.\"\"\"\n    return x * y\n\nPI = 3.14159\n\nprint(\"my_calculations module has been loaded.\") # This will print when module is imported\n```\n\n**Using a Module (Importing):**\nNow, in another Python file (e.g., `main_app.py`) in the same directory, you can import and use the `my_calculations` module.\n\n```python\n# main_app.py\n\nimport my_calculations # Imports the entire module\n\nprint(\"--- Using my_calculations module ---\")\n\nnum1 = 20\nnum2 = 7\n\n# Accessing functions and variables using the module name\nsum_result = my_calculations.add(num1, num2)\nprint(f\"Sum: {num1} + {num2} = {sum_result}\")\n\ndiff_result = my_calculations.subtract(num1, num2)\nprint(f\"Difference: {num1} - {num2} = {diff_result}\")\n\nprint(f\"Value of PI from module: {my_calculations.PI}\")\n\n# You can also import specific items from a module:\nfrom my_calculations import multiply, PI\n\nprint(\"--- Using imported items directly ---\")\nprod_result = multiply(num1, num2)\nprint(f\"Product: {num1} * {num2} = {prod_result}\")\nprint(f\"Value of PI directly: {PI}\")\n```\n\n**Output (when running `main_app.py`):**\n```\nmy_calculations module has been loaded.\n--- Using my_calculations module ---\nSum: 20 + 7 = 27\nDifference: 20 - 7 = 13\nValue of PI from module: 3.14159\n--- Using imported items directly ---\nProduct: 20 * 7 = 140\nValue of PI directly: 3.14159\n```\nThis example demonstrates how functions encapsulate logic and how modules package related functions and variables for easy reuse across different parts of a larger application.",
      "answer_source": "generated",
      "chapter": "Unit 4: Python: Introduction to Python"
    }
  ]
}