{
  "paper_title": "Programming For Problem Solving (CT1 Set 1)",
  "source": "2023-10-05 CT1 Set1",
  "questions": [
    {
      "question_number": "1",
      "question_text": "Write a C program to read a character in uppercase and print the same in lower case.",
      "marks": 5,
      "answer": "To convert an uppercase character to lowercase in C, you can use the `tolower()` function from the `ctype.h` library, or manually adjust its ASCII value. \n\n```c\n#include <stdio.h>\n#include <ctype.h> // Required for tolower() function\n\nint main() {\n    char upperChar;\n    char lowerChar;\n\n    printf(\"Enter an uppercase character: \");\n    scanf(\"%c\", &upperChar);\n\n    // Convert to lowercase using tolower()\n    lowerChar = tolower(upperChar);\n\n    printf(\"The character in lowercase is: %c\\n\", lowerChar);\n\n    return 0;\n}\n```\n\n**Explanation:**\n1.  **`#include <stdio.h>`**: Includes the standard input/output library for `printf` and `scanf`.\n2.  **`#include <ctype.h>`**: Includes the character type library, which provides the `tolower()` function.\n3.  **`char upperChar;`**: Declares a variable `upperChar` to store the input character.\n4.  **`printf(\"Enter an uppercase character: \");`**: Prompts the user to enter a character.\n5.  **`scanf(\"%c\", &upperChar);`**: Reads a single character from the console and stores it in `upperChar`.\n6.  **`lowerChar = tolower(upperChar);`**: The `tolower()` function takes an integer argument (the ASCII value of the character) and returns its lowercase equivalent if it's an uppercase letter; otherwise, it returns the character unchanged. The result is stored in `lowerChar`.\n7.  **`printf(\"The character in lowercase is: %c\\n\", lowerChar);`**: Prints the converted lowercase character.",
      "answer_source": "generated",
      "chapter": "Unit 1: Evolution of Programming & Languages - Input and output statements."
    },
    {
      "question_number": "2",
      "question_text": "On one beautiful Sunday Sheela went to Manavi's house for exam preparation. They have decided to study Mathematics because they have exam on coming Monday. Manavi is a master in Mathematics but Sheela is not so good in Mathematics. After teaching some problems to Sheela, Manavi has given some tasks to Sheela to solve. The problem is to convert input float into a double. Can you help Sheela in finding the solution?",
      "marks": 5,
      "answer": "In C, converting a `float` to a `double` is straightforward and often happens implicitly due to type promotion rules. `double` has higher precision and a larger range than `float`. Here's how Sheela can convert an input `float` into a `double`:\n\n```c\n#include <stdio.h>\n\nint main() {\n    float f_value;\n    double d_value;\n\n    // Prompt for and read a float value\n    printf(\"Enter a floating-point number (float): \");\n    scanf(\"%f\", &f_value);\n\n    // Implicit conversion: assigning a float to a double variable\n    d_value = f_value;\n\n    // Explicit conversion (type casting): also works, though often not necessary here\n    // d_value = (double)f_value;\n\n    printf(\"\\nOriginal float value: %f\\n\", f_value);\n    printf(\"Converted double value: %lf\\n\", d_value); // Use %lf for double\n\n    // To demonstrate potential precision differences (optional, but good for understanding)\n    printf(\"Size of float: %lu bytes\\n\", sizeof(f_value));\n    printf(\"Size of double: %lu bytes\\n\", sizeof(d_value));\n\n    return 0;\n}\n```\n\n**Explanation:**\n1.  **Declare variables**: A `float` variable `f_value` is declared to store the input, and a `double` variable `d_value` is declared to store the converted value.\n2.  **Input**: `scanf(\"%f\", &f_value);` reads a floating-point number into `f_value`.\n3.  **Conversion (Implicit)**: When `d_value = f_value;` is executed, the `float` value stored in `f_value` is automatically promoted (converted) to a `double` and then assigned to `d_value`. This is a safe conversion because `double` can represent all values that `float` can, and typically with higher precision.\n4.  **Conversion (Explicit - commented out)**: `d_value = (double)f_value;` explicitly casts `f_value` to a `double`. While not strictly necessary in this assignment context due to implicit promotion, explicit casting is good practice for clarity in other scenarios or when converting from a larger type to a smaller type (which requires careful handling).\n5.  **Output**: Both the original `float` and the converted `double` values are printed. Note the use of `%lf` for printing `double` values with `printf`.",
      "answer_source": "generated",
      "chapter": "Unit 1: Evolution of Programming & Languages - Numeric Data types: integer, floating point"
    },
    {
      "question_number": "3",
      "question_text": "Differentiate between 'break' and 'continue' statements.",
      "marks": 5,
      "answer": "`break` and `continue` are both control flow statements in C (and many other programming languages) used to alter the normal execution sequence of loops. However, they serve distinct purposes:\n\n**1. `break` Statement:**\n\n*   **Purpose**: The `break` statement is used to terminate the current loop (or `switch` statement) immediately.\n*   **Behavior**: When `break` is encountered, the control flow exits the innermost loop (or `switch`) in which it is located, and execution resumes at the statement immediately following the loop (or `switch`).\n*   **Usage**: It's typically used when a specific condition is met, and there's no need to continue iterating through the remaining part of the loop or evaluating further `case` labels in a `switch`.\n\n    **Example (Loop):**\n    ```c\n    for (int i = 0; i < 5; i++) {\n        if (i == 3) {\n            break; // Exit the loop when i is 3\n        }\n        printf(\"Break Example: %d\\n\", i); // Prints 0, 1, 2\n    }\n    printf(\"Loop after break\\n\"); // Executed after the loop terminates\n    ```\n\n**2. `continue` Statement:**\n\n*   **Purpose**: The `continue` statement is used to skip the rest of the current iteration of the loop and proceed to the next iteration.\n*   **Behavior**: When `continue` is encountered, the control flow jumps to the beginning of the loop for the next iteration. In `for` loops, it typically jumps to the update expression (e.g., `i++`); in `while` and `do-while` loops, it jumps directly to the condition test.\n*   **Usage**: It's typically used when a specific condition is met, and you want to skip processing for the current iteration but continue with subsequent iterations of the loop.\n\n    **Example (Loop):**\n    ```c\n    for (int i = 0; i < 5; i++) {\n        if (i == 3) {\n            continue; // Skip the print statement for i=3\n        }\n        printf(\"Continue Example: %d\\n\", i); // Prints 0, 1, 2, 4\n    }\n    printf(\"Loop after continue\\n\"); // Executed after the loop completes\n    ```\n\n**Summary of Differences:**\n\n| Feature        | `break`                                     | `continue`                                     |\n| :------------- | :------------------------------------------ | :--------------------------------------------- |\n| **Effect**     | Terminates the entire loop/switch.          | Skips the current iteration of the loop.       |\n| **Control Flow** | Jumps to the statement immediately after the loop/switch. | Jumps to the start of the next iteration of the loop. |\n| **Scope**      | Applies to loops (`for`, `while`, `do-while`) and `switch` statements. | Applies only to loops (`for`, `while`, `do-while`). |\n\nIn essence, `break` stops the loop altogether, while `continue` just skips over the current step and moves to the next.",
      "answer_source": "generated",
      "chapter": "Unit 2: Conditional Control - Un-conditional Control Statements : break, continue, goto"
    },
    {
      "question_number": "4",
      "question_text": "Punith is interested in patterns. He went to his teacher to learn more about patterns. His teacher taught him the basic ideas to identify and build patterns. The teacher gave him a problem to build the pattern:\n1\n22\n333\n4444\nCan you help Punith to write a code and solve the problem?",
      "marks": 5,
      "answer": "To help Punith solve the pattern problem, we can use nested loops in C. The outer loop will control the number of rows, and the inner loop will print the number corresponding to the current row, repeated that many times.\n\n**Logic:**\n1.  The pattern has 4 rows. So, an outer loop will iterate from 1 to 4 (for rows).\n2.  In each row `i`, the number `i` is printed `i` times. So, an inner loop will iterate from 1 to `i` (for columns/prints).\n\n```c\n#include <stdio.h>\n\nint main() {\n    int num_rows = 4; // The desired number of rows for the pattern\n\n    // Outer loop for rows\n    for (int i = 1; i <= num_rows; i++) {\n        // Inner loop for printing the number 'i', 'i' times\n        for (int j = 1; j <= i; j++) {\n            printf(\"%d\", i);\n        }\n        printf(\"\\n\"); // Move to the next line after each row is printed\n    }\n\n    return 0;\n}\n```\n\n**Explanation:**\n*   **`num_rows`**: This variable determines how many rows the pattern will have. For the given pattern, it's 4.\n*   **Outer Loop (`for (int i = 1; i <= num_rows; i++)`)**:\n    *   This loop iterates `num_rows` times. The variable `i` represents the current row number and also the digit to be printed in that row.\n    *   In the first iteration, `i` is 1.\n    *   In the second iteration, `i` is 2, and so on.\n*   **Inner Loop (`for (int j = 1; j <= i; j++)`)**:\n    *   This loop is nested inside the outer loop. It runs `i` times for each value of `i` from the outer loop.\n    *   Its purpose is to print the value of `i` (the current row number) `i` times.\n    *   When `i` is 1, it prints '1' once.\n    *   When `i` is 2, it prints '2' twice.\n    *   When `i` is 3, it prints '3' thrice, and so on.\n*   **`printf(\"%d\", i);`**: Prints the current row number (`i`) without a newline, so the numbers appear side-by-side on the same line.\n*   **`printf(\"\\n\");`**: After the inner loop completes (meaning all numbers for the current row have been printed), this statement moves the cursor to the next line, preparing for the next row of the pattern.",
      "answer_source": "generated",
      "chapter": "Unit 2: Conditional Control - Looping Control Statements: nested for, nested while"
    },
    {
      "question_number": "5",
      "question_text": "Write an algorithm, flowchart and C program that prints the Fibonacci Series for the given number of elements\n(Ex: Input 5, Output 0,1,1,2,3).\n(OR)",
      "marks": 10,
      "answer": "The Fibonacci series is a sequence of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence typically begins 0, 1, 1, 2, 3, 5, 8, and so on.\n\n### **Algorithm for Fibonacci Series:**\n\n1.  **START**\n2.  Declare three integer variables: `n` (for the number of elements), `a`, `b`, `nextTerm`.\n3.  Initialize `a = 0` and `b = 1`.\n4.  Prompt the user to enter the number of elements `n`.\n5.  Read the value of `n`.\n6.  **IF** `n` is 0, print \"Series is empty.\" and **GOTO** step 14.\n7.  **IF** `n` is 1, print `a` and **GOTO** step 14.\n8.  Print `a` and `b` (the first two terms).\n9.  **FOR** `i` from 3 to `n` (inclusive) **DO**:\n    a.  Calculate `nextTerm = a + b`.\n    b.  Print `nextTerm`.\n    c.  Update `a = b`.\n    d.  Update `b = nextTerm`.\n10. **ENDFOR**\n11. **END**\n\n### **Flowchart (Conceptual Description):**\n\n*(Since I cannot generate an actual image, here's a textual description of the flowchart nodes and connections.)*\n\n1.  **Terminal (Start)**\n2.  **Input/Output (Read n)**\n3.  **Process (Initialize a=0, b=1)**\n4.  **Decision (n == 0?)**\n    *   **Yes**: **Input/Output (Print \"Empty\")** -> **Terminal (End)**\n    *   **No**: **Decision (n == 1?)**\n        *   **Yes**: **Input/Output (Print a)** -> **Terminal (End)**\n        *   **No**: **Input/Output (Print a, Print b)**\n5.  **Process (Loop Counter i = 3)**\n6.  **Decision (i <= n?)**\n    *   **Yes**: \n        a.  **Process (nextTerm = a + b)**\n        b.  **Input/Output (Print nextTerm)**\n        c.  **Process (a = b)**\n        d.  **Process (b = nextTerm)**\n        e.  **Process (Increment i)** -> Go back to **Decision (i <= n?)**\n    *   **No**: **Terminal (End)**\n\n### **C Program for Fibonacci Series:**\n\n```c\n#include <stdio.h>\n\nint main() {\n    int n;           // Number of elements to print\n    int a = 0;       // First Fibonacci number\n    int b = 1;       // Second Fibonacci number\n    int nextTerm;    // To store the next Fibonacci number\n\n    printf(\"Enter the number of elements for Fibonacci Series: \");\n    scanf(\"%d\", &n);\n\n    if (n < 0) {\n        printf(\"Please enter a non-negative number of elements.\\n\");\n    } else if (n == 0) {\n        printf(\"Fibonacci Series: (empty)\\n\");\n    } else if (n == 1) {\n        printf(\"Fibonacci Series: %d\\n\", a);\n    } else {\n        printf(\"Fibonacci Series: %d, %d\", a, b); // Print first two terms\n        for (int i = 3; i <= n; i++) {\n            nextTerm = a + b;\n            printf(\", %d\", nextTerm);\n            a = b;             // Update a to be the previous b\n            b = nextTerm;      // Update b to be the new nextTerm\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```\n\n**Explanation of C Program:**\n1.  **Initialization**: `a` and `b` are initialized to 0 and 1, respectively, which are the first two numbers in the Fibonacci sequence.\n2.  **Input**: The program prompts the user to enter the number of elements `n` they want to see in the series.\n3.  **Edge Cases**: `if-else if` statements handle special cases for `n < 0` (invalid input), `n == 0` (empty series), and `n == 1` (only print the first term, 0).\n4.  **Printing Initial Terms**: For `n >= 2`, the first two terms (`a` and `b`) are printed outside the loop because the loop starts calculating from the third term.\n5.  **Loop for Remaining Terms**: A `for` loop runs from `i = 3` up to `n`.\n    *   Inside the loop, `nextTerm` is calculated as the sum of `a` and `b`.\n    *   `nextTerm` is then printed.\n    *   To prepare for the next iteration, `a` is updated to the value of `b`, and `b` is updated to the value of `nextTerm`. This effectively shifts the 'window' of the last two terms forward in the sequence.\n6.  **Output Format**: Commas are used to separate the numbers in the series, and a newline character is printed at the end for clean output.",
      "answer_source": "generated",
      "chapter": "Unit 2: Conditional Control - Looping Control Statements: for, while, do.while"
    },
    {
      "question_number": "6",
      "question_text": "Write a program that determines a student's grade. The program will read three types of scores (quiz, mid-term, and final scores) and determine the grade based on the following rules:\nif the average score >=90%; print grade=A\nif the average score >= 70% and < 90%; print grade=B\nif the average score >=50% and <70%; print grade=C\nif the average score <50%; print grade=F\nUse a switch case to solve the problem.",
      "marks": 10,
      "answer": "To determine a student's grade using a `switch` case for score ranges, we first need to read the three scores, calculate their average, and then map this average to an integer category that can be used by the `switch` statement. A `switch` statement cannot directly evaluate range conditions, so an intermediate step using `if-else if` statements to assign a categorical integer is necessary.\n\nHere's the C program:\n\n```c\n#include <stdio.h>\n\nint main() {\n    float quiz_score, midterm_score, final_score;\n    float average_score;\n    int grade_category; // To map average score to an integer for switch\n\n    // 1. Read three types of scores\n    printf(\"Enter Quiz Score (out of 100): \");\n    scanf(\"%f\", &quiz_score);\n\n    printf(\"Enter Mid-term Score (out of 100): \");\n    scanf(\"%f\", &midterm_score);\n\n    printf(\"Enter Final Score (out of 100): \");\n    scanf(\"%f\", &final_score);\n\n    // Input validation (optional but good practice)\n    if (quiz_score < 0 || quiz_score > 100 ||\n        midterm_score < 0 || midterm_score > 100 ||\n        final_score < 0 || final_score > 100) {\n        printf(\"Error: Scores must be between 0 and 100.\\n\");\n        return 1; // Indicate an error\n    }\n\n    // 2. Calculate the average score\n    average_score = (quiz_score + midterm_score + final_score) / 3.0;\n\n    printf(\"\\nCalculated Average Score: %.2f\\n\", average_score);\n\n    // 3. Map the average score to an integer category for the switch statement\n    if (average_score >= 90) {\n        grade_category = 1; // Grade A\n    } else if (average_score >= 70) {\n        grade_category = 2; // Grade B\n    } else if (average_score >= 50) {\n        grade_category = 3; // Grade C\n    } else {\n        grade_category = 4; // Grade F\n    }\n\n    // 4. Use a switch case to determine and print the grade\n    printf(\"Student's Grade: \");\n    switch (grade_category) {\n        case 1:\n            printf(\"A\\n\");\n            break;\n        case 2:\n            printf(\"B\\n\");\n            break;\n        case 3:\n            printf(\"C\\n\");\n            break;\n        case 4:\n            printf(\"F\\n\");\n            break;\n        default:\n            printf(\"Invalid grade category (should not happen).\\n\");\n            break;\n    }\n\n    return 0;\n}\n```\n\n**Explanation:**\n1.  **Variable Declaration**: `float` variables are used for scores to handle decimal values. `average_score` will store the computed average. An `int` variable `grade_category` is crucial for the `switch` statement, as `switch` works with integer or char expressions, not floating-point ranges.\n2.  **Input Scores**: The program prompts the user to enter scores for quiz, mid-term, and final exams using `scanf()`.\n3.  **Input Validation (Optional)**: A basic check ensures scores are within a realistic range (0-100). This improves robustness.\n4.  **Calculate Average**: The `average_score` is computed by summing the three scores and dividing by 3.0 (using 3.0 ensures floating-point division).\n5.  **Map to Grade Category**: This is the critical step for using `switch` with ranges.\n    *   A series of `if-else if-else` statements evaluate the `average_score` against the defined grade boundaries.\n    *   Based on the `average_score`'s range, an integer value (1 for 'A', 2 for 'B', 3 for 'C', 4 for 'F') is assigned to `grade_category`.\n6.  **`switch` Statement**: The `switch` statement then uses the `grade_category` integer value.\n    *   Each `case` corresponds to one of the assigned integer categories.\n    *   The `printf()` statement inside each `case` prints the corresponding letter grade.\n    *   `break` statements are essential to exit the `switch` after a matching case is found, preventing \"fall-through\" to subsequent cases.\n    *   A `default` case is included for robustness, though with the `if-else if-else` logic above, it should theoretically not be reached.",
      "answer_source": "generated",
      "chapter": "Unit 2: Conditional Control - Conditional Statements : Switch case"
    }
  ]
}